==> ./make_hound0 <==
#!/bin/bash
# Hound 0:  AKA `Cat presents:Give me the flag!`
# Reading the contents of a file/listing contents of a directory.
#
# This script creates the flag for hound level 0. This level requires the student
# to utilize basic linux commands to read the file. To make sure that they have to

==> ./make_hound1 <==
#!/bin/bash
# Hound 1 aka Special characters never stopped me before! Go cat go!
# Working with special characters in the filename.
# This flag requires them to read the file either via cat ./<FILENAME> or cat '<FILENAME>'


==> ./make_hound2 <==
#!/bin/bash
# Hound 2 aka Spaces! Why did it have to be spaces. You darned dirty spaces!
# Hound flag that involves dealing with spaces in the file name.

==> ./make_hound3 <==
#!/bin/bash
# Hound3: AKA You think you can hide me? I am a master of detection!
# working with hidden files.
# This flag requires the user to find a hidden file
# then read the contents of the file. As they previously
# had to read a file with spaces this is a hearken back to that moment.


==> ./make_hound4 <==
#!/bin/bash
# Hound4: AKA I don't need no UTF8, ASCII is enough for me!
# this flag requires them to utilize the `find` command or grep to find a file
# that is ASCII-Text but nothing else.
# It includes a nice litte surprise if they try to use grep. If they do they have to use
# the perl regex syntax and do a double negative like so to find the correct flag.
# grep -Iv -P ['\x00-\x7f]' or else they'll get 2 flags. one real and one that has a random
# character in the flag string replaced with the cyrillic equivalent.


==> ./make_hound5 <==
#!/bin/bash
# Hound 5 aka `Saint IGNUcius send help I'm trapped in Nano and cannot use lisp!`
# This will be a nano flag. All in one. They have to go to a certain line, find a string.
# search for that string, then read the file it tells you into nano to get the flag.
# All basic text editor stuff.

==> ./make_hound6 <==
#!/bin/bash
# Hound 6 aka `I'm not stuck, I'm just generating entropy for the NSA! Plz send help.`
# This will be the vim version the nano flag.
# it's basicaly just the vim flag but modified for vim purposes.
# insert into their text file to then find the flag.

==> ./make_hound7 <==
#!/bin/bash
# Hound 7 aka `The Unix police found out I prefer nano and locked me inside of the VIM ReEducation Program, time to breakfree and get outta here with the key! Go shell go!`
# but also they have set their shell to bash via
# set SHELL=/bin/bash. And then run shell.
# via the command mode.

==> ./make_hound8 <==
#!/bin/bash
# Hound 8 aka The greatest detective in the world has arrived. Detectice Phineas is on the case!
# This flag requires them to find a file with certain metadata from the list of
# files. It has 4 attributes. Size,Owner,Group,Permissions.


==> ./make_hound9 <==
#!/bin/bash
# Hound9 AKA I am the master of joining. All connection are known instantly.
# the one where they use join to find the password for a certain user.
# they could obviously do this by just opening the files but it's not very easy todo.
# this script can also be used to make fake passwd and shadow files.


==> ./make_hound10 <==
#!/bin/bash
# Hound10 AKA I am the master of joining. All connection are known instantly.
# the one where they use join to find the password for a certain user.
# they could obviously do this by just opening the files but it's not very easy todo.
# this script can also be used to make fake passwd and shadow files.



==> ./make_hound11 <==
#!/bin/bash
# Hound 11 aka `I write scripts _in_ my scripts! *INCEPTION SOUND*`
# This flag requires them find a string that is a certain number of characters in length.
# They can use either awk/sed to get the answer here. Then they'll have to select the one
# that does not have some special character in it. There'll only be 2 flags that are the
# correct length as the code to get the right answer is way too complex for a flag
# awk "$0 ~ /^[a-zA-Z]*$/ && length($0) == $LENGTH {print };" `<FILENAME>`;

==> ./make_hound12 <==
#!/bin/bash
# Hound12 AKA I can spot the most minute differences!
# the one where they use diff to find the one line that's different
# between two files.
# It's a simple diff thing but since there's a ton of lines they can do this two
# ways. The first is to just do `diff file1 file2`.

==> ./make_hound13 <==
#!/bin/bash
# Hound13 aka No obfusication can escape my watchful eye. I *grep* it all!
# the one where they're grepping the password that appears after the certain string.
# also combines it with strings as the file is full of binary data.

==> ./make_hound14 <==
#!/bin/bash
# Hound 14 AKA `Why can't I hold all of these pipes?!/I'm laying down pipes better than a Chad Plumber!
# Macarthur Inbody <mdi2455@email.vccs.edu>
# AGPLv3
# 2019 -
# Hound Flag where they have to repeatedly decompress a file many times
# Then they have to decode the hexdumped file. Followed by decoding the base64
# text to get the final flag string.


==> ./make_hound15 <==
#!/bin/bash
# Hound 15 aka `I have a problem. I know I'll use regex. Now I have 2 problems.`
# This flag requires them to write a regex that will match the line that has a set pattern of a string. They'll be
# utilizing grep or something similar to help with the input filtering for the following flag.

==> ./make_hound16 <==
#!/bin/bash
# Hound 16 aka `I'm a genius program, my script can't have syntax errors!`
# this flag will generate a bash script that has a couple of syntax errors.
# Basically they'll have to fix a logic error, fix a typo in a variable name.
# then they'll also have to fix a syntax error. After doing this, they'll
# then be able to get the program to generate a string for them after passing it an argument. Super simple thing to make sure they
# get some basic bash scripting.

==> ./make_hound17 <==
#!/bin/bash
# Hound 17 aka `Look mah I'm a hacker now, I'm cracking someone's pin!/I've been bourne again as a programmer.`
# Note the second one is a joke about BASH being the "bourne again shell" a stupid joke but I liked it.
# The Scripting Flag. aka let's write a forloop, and redirect output!
# It requires them to write their first bash script to bruteforce a pin 
# and then cat that data to a program which'll give them the data back. 
# But it only accepts the pin as a base64 encoded file.
