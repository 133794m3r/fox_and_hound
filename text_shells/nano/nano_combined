
 The nano editor is designed to emulate the functionality and ease-of-use
 of the UW Pico text editor.  There are four main sections of the editor.
 The top line shows the program version, the current filename being
 edited, and whether or not the file has been modified.  Next is the main
 editor window showing the file being edited.  The status line is the
 third line from the bottom and shows important messages.  The bottom two
 lines show the most commonly used shortcuts in the editor.

 Shortcuts are written as follows: Control-key sequences are notated with
 a '^' and can be entered either by using the Ctrl key or pressing the Esc
 key twice.  Meta-key sequences are notated with 'M-' and can be entered
 using either the Alt, Cmd, or Esc key, depending on your keyboard setup.
 Also, pressing Esc twice and then typing a three-digit decimal number
 from 000 to 255 will enter the character with the corresponding value.
 The following keystrokes are available in the main editor window.
 Alternative keys are shown in parentheses:

^G    (F1)      Display this help text
^X    (F2)      Close the current buffer / Exit from nano
^O    (F3)      Write the current buffer (or the marked region) to disk
^R    (Ins)     Insert another file into current buffer (or into new buffer)

^W    (F6)      Search forward for a string or a regular expression
^\    (M-R)     Replace a string or a regular expression
^K    (F9)      Cut current line (or marked region) and store it in cutbuffer
^U    (F10)     Uncut from the cutbuffer into the current line

^J    (F4)      Justify the current paragraph
^T    (F12)     Invoke the spell checker, if available

^C    (F11)     Display the position of the cursor
^_    (M-G)     Go to line and column number

M-U             Undo the last operation
M-E             Redo the last undone operation

M-A   (^6)      Mark text starting from the cursor position
M-6   (M-^)     Copy current line (or marked region) and store it in cutbuffer

M-]             Go to the matching bracket

^Q              Search backward for a string or a regular expression
M-Q   (M-▲)     Search next occurrence backward
M-W   (M-▼)     Search next occurrence forward

^B    (◀)       Go back one character
^F    (▶)       Go forward one character
^◀    (M-Space) Go back one word
^▶    (^Space)  Go forward one word
^A    (Home)    Go to beginning of current line
^E    (End)     Go to end of current line

^P    (▲)       Go to previous line
^N    (▼)       Go to next line
M--   (M-_)     Scroll up one line without moving the cursor textually
M-+   (M-=)     Scroll down one line without moving the cursor textually

^▲    (M-7)     Go to previous block of text
^▼    (M-8)     Go to next block of text
M-(   (M-9)     Go to beginning of paragraph; then of previous paragraph
M-)   (M-0)     Go just beyond end of paragraph; then of next paragraph

^Y    (PgUp)    Go one screenful up
^V    (PgDn)    Go one screenful down
M-\   (^Home)   Go to the first line of the file
M-/   (^End)    Go to the last line of the file

M-◀   (M-<)     Switch to the previous file buffer
M-▶   (M->)     Switch to the next file buffer

^I    (Tab)     Insert a tab at the cursor position
^M    (Enter)   Insert a newline at the cursor position

^H    (Bsp)     Delete the character to the left of the cursor
^D    (Del)     Delete the character under the cursor
Sh-^Del         Cut backward from cursor to word start
^Del            Cut forward from cursor to next word start
M-T             Cut from the cursor position to the end of the file

M-J             Justify the entire file
M-D             Count the number of words, lines, and characters
M-V             Insert the next keystroke verbatim

^L              Refresh (redraw) the current screen
^Z              Suspend the editor (if suspension is enabled)

M-}   (Tab)     Indent the current line (or marked lines)
M-{   (Sh-Tab)  Unindent the current line (or marked lines)

M-3             Comment/uncomment the current line (or marked lines)
^]              Try and complete the current word

M-:             Start/stop recording a macro
M-;             Run the last recorded macro

M-Del           Throw away the current line (or marked region)

M-B             Invoke the linter, if available

^S              Save file without prompting

M-X             Help mode enable/disable
M-C             Constant cursor position display enable/disable
M-S             Smooth scrolling enable/disable
M-$             Soft wrapping of overlong lines enable/disable
M-#             Line numbering enable/disable
M-P             Whitespace display enable/disable
M-Y             Color syntax highlighting enable/disable

M-H             Smart home key enable/disable
M-I             Auto indent enable/disable
M-K             Cut to end enable/disable
M-L             Hard wrapping of overlong lines enable/disable
M-O             Conversion of typed tabs to spaces enable/disable

M-M             Mouse support enable/disable
M-Z             Suspension enable/disable
nano - Nano's ANOther editor, an enhanced free Pico clone
Synopsis

nano [OPTIONS] [[+LINE,COLUMN] FILE]...
Description

This manual page briefly documents the nano command.

nano is a small, free and friendly editor which aims to replace Pico, the default editor included in the non-free Pine package. Rather than just copying Pico's look and feel, nano also implements some missing (or disabled by default) features in Pico, such as "search and replace" and "go to line and column number".
Options

+LINE,COLUMN

    Places cursor at line number LINE and column number COLUMN (at least one of which must be specified) on startup, instead of the default of line 1, column 1. 
-?

Same as -h (--help).
-A (--smarthome)
    Make the Home key smarter. When Home is pressed anywhere but at the very beginning of non-whitespace characters on a line, the cursor will jump to that beginning (either forwards or backwards). If the cursor is already at that position, it will jump to the true beginning of the line. 
-B (--backup)
    When saving a file, back up the previous version of it to the current filename suffixed with a ~. 
-C dir (--backupdir=dir)
    Set the directory where nano puts unique backup files if file backups are enabled. 
-D (--boldtext)
    Use bold text instead of reverse video text. 
-E (--tabstospaces)
    Convert typed tabs to spaces. 
-F (--multibuffer)
    Enable multiple file buffers, if available. 
-H (--historylog)
    Log search and replace strings to ~/.nano_history, so they can be retrieved in later sessions, if nanorc support is available. 
-I (--ignorercfiles)
    Don't look at SYSCONFDIR/nanorc or ~/.nanorc, if nanorc support is available. 
-K (--rebindkeypad)
    Interpret the numeric keypad keys so that they all work properly. You should only need to use this option if they don't, as mouse support won't work properly with this option enabled. 
-L (--nonewlines)
    Don't add newlines to the ends of files. 
-N (--noconvert)
    Disable automatic conversion of files from DOS/Mac format. 
-O (--morespace)
    Use the blank line below the titlebar as extra editing space. 
-Q str (--quotestr=str)
    Set the quoting string for justifying. The default is "^([ \t]*[#:>\|}])+" if extended regular expression support is available, or "> " otherwise. Note that \t stands for a Tab. 
-R (--restricted)
    Restricted mode: don't read or write to any file not specified on the command line; read any nanorc files; allow suspending; allow a file to be appended to, prepended to, or saved under a different name if it already has one; or use backup files or spell checking. Also accessible by invoking nano with any name beginning with 'r' (e.g. "rnano"). 
-S (--smooth)
    Enable smooth scrolling. Text will scroll line-by-line, instead of the usual chunk-by-chunk behavior. 
-T cols (--tabsize=cols)
    Set the size (width) of a tab to cols columns. The value of cols must be greater than 0. The default value is 8. 
-U (--quickblank)
    Do quick statusbar blanking. Statusbar messages will disappear after 1 keystroke instead of 25. Note that -c overrides this. 
-V (--version)
    Show the current version number and exit. 
-W (--wordbounds)
    Detect word boundaries more accurately by treating punctuation characters as part of a word. 
-Y str (--syntax=str)
    Specify a specific syntax highlighting from the nanorc to use, if available. 
-c (--const)
    Constantly show the cursor position. Note that this overrides -U. 
-d (--rebinddelete)
    Interpret the Delete key differently so that both Backspace and Delete work properly. You should only need to use this option if Backspace acts like Delete on your system. 
-h (--help)
    Show a summary of command line options and exit. 
-i (--autoindent)
    Indent new lines to the previous line's indentation. Useful when editing source code. 
-k (--cut)
    Enable cut from cursor to end of line. 
-l (--nofollow)
    If the file being edited is a symbolic link, replace the link with a new file instead of following it. Good for editing files in /tmp, perhaps? 
-m (--mouse)
    Enable mouse support, if available for your system. When enabled, mouse clicks can be used to place the cursor, set the mark (with a double click), and execute shortcuts. The mouse will work in the X Window System, and on the console when gpm is running. 
-o dir (--operatingdir=dir)
    Set operating directory. Makes nano set up something similar to a chroot. 
-p (--preserve)
    Preserve the XON and XOFF sequences (^Q and ^S) so they will be caught by the terminal. 
-r cols (--fill=cols)
    Wrap lines at column cols. If this value is 0 or less, wrapping will occur at the width of the screen less cols columns, allowing the wrap point to vary along with the width of the screen if the screen is resized. The default value is -8. 
-s prog (--speller=prog)
    Enable alternative spell checker command. 
-t (--tempfile)
    Always save changed buffer without prompting. Same as Pico's -t option. 
-v (--view)
    View file (read only) mode. 
-w (--nowrap)
    Disable wrapping of long lines. 
-x (--nohelp)
    Disable help screen at bottom of editor. 
-z (--suspend)
    Enable suspend ability. 
-a, -b, -e, -f, -g, -j
    Ignored, for compatibility with Pico. 

Initialization File

nano will read initialization files in the following order: SYSCONFDIR/nanorc, then ~/.nanorc. Please see nanorc(5) and the example file nanorc.sample, both of which should be provided with nano.
Notes

If no alternative spell checker command is specified on the command line or in one of the nanorc files, nano will check the SPELL environment variable for one.

In some cases nano will try to dump the buffer into an emergency file. This will happen mainly if nano receives a SIGHUP or SIGTERM or runs out of memory. It will write the buffer into a file named nano.save if the buffer didn't have a name already, or will add a ".save" suffix to the current filename. If an emergency file with that name already exists in the current directory, it will add ".save" plus a number (e.g. ".save.1") to the current filename in order to make it unique. In multibuffer mode, nano will write all the open buffers to their respective emergency files.
Bugs

Please send any comments or bug reports to nano@nano-editor.org.

The nano mailing list is available from nano-devel@gnu.org.

To subscribe, email to nano-devel-request@gnu.org with a subject of "subscribe".
Homepage

http://www.nano-editor.org/
See Also

nanorc(5)

/usr/share/doc/nano/ (or equivalent on your system)

Author

Chris Allegretta <chrisa@asty.org>, et al (see AUTHORS and THANKS for details). This manual page was originally written by Jordi Mallach <jordi@gnu.org>, for the Debian system (but may be used by others).
Referenced By
Usage: nano [OPTIONS] [[+LINE[,COLUMN]] FILE]...

To place the cursor on a specific line of a file, put the line number with
a '+' before the filename.  The column number can be added after a comma.
When a filename is '-', nano reads data from standard input.

Option      GNU long option     Meaning
 -A     --smarthome     Enable smart home key
 -B     --backup        Save backups of existing files
 -C <dir>   --backupdir=<dir>   Directory for saving unique backup files
 -D     --boldtext      Use bold instead of reverse video text
 -E     --tabstospaces      Convert typed tabs to spaces
 -F     --multibuffer       Read a file into a new buffer by default
 -G     --locking       Use (vim-style) lock files
 -H     --historylog        Log & read search/replace string history
 -I     --ignorercfiles     Don't look at nanorc files
 -K     --rebindkeypad      Fix numeric keypad key confusion problem
 -L     --nonewlines        Don't add newlines to the ends of files
 -M     --trimblanks        Trim tail spaces when hard-wrapping
 -N     --noconvert     Don't convert files from DOS/Mac format
 -O     --morespace     Use one more line for editing
 -P     --positionlog       Log & read location of cursor position
 -Q <regex> --quotestr=<regex>  Regular expression to match quoting
 -R     --restricted        Restricted mode
 -S     --smooth        Scroll by line instead of half-screen
 -T <#cols> --tabsize=<#cols>   Set width of a tab to #cols columns
 -U     --quickblank        Do quick statusbar blanking
 -V     --version       Print version information and exit
 -W     --wordbounds        Detect word boundaries more accurately
 -X <str>   --wordchars=<str>   Which other characters are word parts
 -Y <name>  --syntax=<name>     Syntax definition to use for coloring
 -Z     --zap           Let Bsp and Del erase a marked region
 -a     --atblanks      When soft-wrapping, do it at whitespace
 -c     --constantshow      Constantly show cursor position
 -d     --rebinddelete      Fix Backspace/Delete confusion problem
 -g     --showcursor        Show cursor in file browser & help text
 -h     --help          Show this help text and exit
 -i     --autoindent        Automatically indent new lines
 -k     --cutfromcursor     Cut from cursor to end of line
 -l     --linenumbers       Show line numbers in front of the text
 -m     --mouse         Enable the use of the mouse
 -n     --noread        Do not read the file (only write it)
 -o <dir>   --operatingdir=<dir>    Set operating directory
 -p     --preserve      Preserve XON (^Q) and XOFF (^S) keys
 -r <#cols> --fill=<#cols>      Set hard-wrapping point at column #cols
 -s <prog>  --speller=<prog>    Enable alternate speller
 -t     --tempfile      Auto save on exit, don't prompt
 -u     --unix          Save a file by default in Unix format
 -v     --view          View mode (read-only)
 -w     --nowrap        Don't hard-wrap long lines
 -x     --nohelp        Don't show the two help lines
 -y     --afterends     Make Ctrl+Right stop at word ends
 -z     --suspend       Enable suspension
 -$     --softwrap      Enable soft line wrapping
