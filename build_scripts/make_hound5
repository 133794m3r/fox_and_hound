#!/bin/bash
# Hound 5 aka `Saint IGNUcius send help I'm trapped in Nano and cannot use lisp!`
# Macarthur Inbody <mdi2455@email.vccs.edu>
# AGPLv3
# 2019 -
#This will be a nano flag. All in one. They have to find a string
#then read into nano a file based on the string they find.
#basic text editor stuff.
HASH_ENCODING='b32';
if [[ $# -lt 1 ]];then
    level=5;
else
    level=$1;
fi
#this reads in the functions that are in the library.
source build_functions;

#we seed $RANDOM with the current level value.
seed_random $level;

#we then make the flag by calling it.
#FLAG_HOUND=$( make_flag $level 1);

#we continue by selecting things semi_randomly.
#when we are in debug mode it'll be calling debug_random
continue_random;

WORD_ARRAY=(19 20 21 22 23 24 25);
tmp_rnd=`( dd if=/dev/urandom bs=2 count=1 status=none | od -A n -t u )`;
#chosen_word=${WORD_ARRAY[$(( $RANDOM % 7 ))]};
chosen_word=${WORD_ARRAY[$(( $tmp_rnd % 7 ))]};
FLAG_HOUND=$( make_semistatic_flag $chosen_word);

cd ../text_shells/nano;
#CORRECT_FLAG="$( echo "$(shuf -n 1 hound_dict)$HOUND_LEVEL" | openssl dgst -sha1 -binary | b32 )$HOUND_LEVEL";
#currently it's ArticFox8
#CORRECT_FLAG='3ss6xebhdpn8je3xrjce6e6p4rqxmyt4';
#CORRECT_FLAG='fIgfIWfZuOQ2jiMIl6iHQHErwak=';
#the false flag is there to make it harder for them to bruteforce the answer.
#FALSE_FLAG='3ss6xebhdpn8je38'
FALSE_FLAG='';
#FALSE_FLAG='1234567890ABCDEF';
SEARCH_STRING0='';
SEARCH_STRING1='';
SEARCH_STRING2='';
FLAG_FILE='';
FLAG_STRING='Your flag is the following base64 encoded string';
tmp=0;
#removing the build files.
rm -v built_files/*
INSTRUCTIONS0='Your next instructions are located after the string ';
INSTRUCTIONS1='Now you need to read the file ';
#this gets all of the files in the top directory, and then it does an inverse
#grep to remove the .header file from the list of files that are shown. It then
#puts this output into an array.
#nano_files_arr=( $( find . -maxdepth 1 -type f | grep -v './.header' ) );
nano_files_arr=( $(ls | grep -v 'built_files' ) );
#this gives the length of the array the [*]=all items. And doing ${#var} gets you
#the length of the var.
nano_files_arr_len=${#nano_files_arr[*]};

#gets a random number between $RANDOM and n-1.

i=$(( $RANDOM % $nano_files_arr_len ));
#selects a random item from the array.
tmp=${nano_files_arr[$i]};
#starts the string with the value.
cat_str=$tmp;
#increments the value.
i=$(( $i+1 ));
#checks if we've overflowed.
if [[ $i -gt $(( $nano_files_arr_len - 1)) ]];then
    i=0;
fi
#appends to the cat_str variable.
cat_str=$cat_str' '${nano_files_arr[$i]};
i=$(( $i +1 ));
if [[ $i -gt $(( $nano_files_arr_len - 1)) ]];then
    i=0;
fi

cat_str=$cat_str' '${nano_files_arr[$i]};
#the final complete string to be catted.
echo $cat_str;
#this sends the files to the built_files dir and the combined file.
cat $cat_str > built_files/nano_combined;
#changing directory to the directory.
cd built_files;

nano_combined_lines=$(cat nano_combined |  wc -l );
echo $nano_combined_lines;
first_string_line_num=0;
second_string_line_num=0;
third_string_line_num=0;
line_max=$(( $nano_combined_lines/3  ));
echo $lines_max;

first_string_line_num=$(( $RANDOM % $line_max ));
line_max=$(( $line_max * 2 ));
range=$(( $line_max - $first_string_line_num ));
second_string_line_num=$(( ( $RANDOM % $range ) + $first_string_line_num ));
line_max=$(( $nano_combined_lines - 50 ));
range=$(( $lines_max - $second_string_line_num));
third_string_line_num=$(( ($RANDOM % $range) + $second_string_line_num));
line='';
instruction_line=$(( $RANDOM % $nano_combined_lines ));

while [[ $first_string_line_num -eq $instruction_line || $second_string_line_num -eq $instruction_line || $third_string_line_num -eq $instruction_line ]]; do
    instruction_line=$(( $RANDOM % $nano_combined_lines));
done

echo "f:$first_string_line_num s:$second_string_line_num t:$third_string_line_num";
SEARCH_STRING0=$( printf '%5s' $RANDOM | b32 );
SEARCH_STRING1=$( printf '%5s' $RANDOM | b32 );
SEARCH_STRING2=$( printf '%5s' $RANDOM | b32 );
FLAG_FILE=$( printf '%5s' $RANDOM | b32 );

tmp_num=$(($RANDOM % 3));
false_file='';
echo 'il:'$instruction_line;

#here we get the instruction line printed to the screen so it can be grepped out.
#we also select which of the 3 search strings are the correct one. 1,2 or 3.
if [[ $tmp_num -eq 0 ]]; then
#This is the INSTRUCTION String with the search string This is the first string
#it is the one that says "search for this string" more or less.
    INSTRUCTIONS0="$INSTRUCTIONS0 $SEARCH_STRING0";
    #we set the first string to be at least 30 lines past the first search string,
    #but up to 80 lines.
    first_string_line_num=$(( $instruction_line + (($RANDOM % 50 ) + 30) ));
    #The first SEARCH String which in this case is correct as it includes FLAG_FILE in it.
    #since it's all inside of a "" all variables are expanded.
    SEARCH_STRING0="$SEARCH_STRING0   $INSTRUCTIONS1 $FLAG_FILE"
    #the false file using method above expanded to 5 characters than b32 encoded.
    false_file=$(printf '%5s' $RANDOM | b32 );
#the false flags are just the first FALSE_FLAG string(17chrs) appended with 0-999 and then expanded to 20 characters with spaces followed by b32 encoded.
#by doing this the string is the same length as the real flag.
    FALSE_FLAG=$( echo $RANDOM | mk_hash );
    printf  "\n$FLAG_STRING $FALSE_FLAG\n" > $false_file;
    #set the search string to a false file.
    SEARCH_STRING1="$SEARCH_STRING1   $INSTRUCTIONS1 $false_file";
    #we set a new false fale and make sure $RANDOM is padded to 5 bytes.
    false_file=$(printf '%5s' $RANDOM | b32 );
    #the flag string is outputted into this incorrect file.
    FALSE_FLAG=$( echo $RANDOM | mk_hash );
    printf "\n$FLAG_STRING $FALSE_FLAG\n" > $false_file;
    #we make sure to set the 3rd search string with the wrong data.
    SEARCH_STRING2="$SEARCH_STRING2   $INSTRUCTIONS1 $false_file";
#this time it's #1 is correct search string.

elif [[ $tmp_num -eq 1 ]];then

    second_string_line_num=$(( $instruction_line + (( $RANDOM % 50 ) + 30) ));
    INSTRUCTIONS0="$INSTRUCTIONS0 $SEARCH_STRING1";
    SEARCH_STRING1="$SEARCH_STRING1   $INSTRUCTIONS1 $FLAG_FILE"

    FALSE_FLAG=$( echo $RANDOM | mk_hash );
    printf  "\n$FLAG_STRING $FALSE_FLAG\n" > $false_file;
    #set the search string to a false file.
    SEARCH_STRING0="$SEARCH_STRING0   $INSTRUCTIONS1 $false_file";
    #we set a new false fale and make sure $RANDOM is padded to 5 bytes.
    false_file=$(printf '%5s' $RANDOM | b32 );
    #the flag string is outputted into this incorrect file.
    FALSE_FLAG=$( echo $RANDOM | mk_hash );
    printf "\n$FLAG_STRING $FALSE_FLAG\n" > $false_file;
    SEARCH_STRING2="$SEARCH_STRING2   $INSTRUCTIONS1 $false_file";

#and this time it's the 3rd string aka SEARCH_STRING2 all else is the same.
elif [[ $tmp_num -eq 2 ]];then

    third_string_line_num=$(( $instruction_line + (($RANDOM % 50 ) + 30) ));
    INSTRUCTIONS0="$INSTRUCTIONS0 $SEARCH_STRING2";
    SEARCH_STRING2="\n$SEARCH_STRING2   $INSTRUCTIONS1 $FLAG_FILE\n"

    false_file=$(printf '%5s' $RANDOM | b32 );
    FALSE_FLAG=$( echo $RANDOM | mk_hash );
    printf  "\n$FLAG_STRING $FALSE_FLAG\n" > $false_file;
    #set the search string to a false file.
    SEARCH_STRING0="$SEARCH_STRING0   $INSTRUCTIONS1 $false_file";
    #we set a new false fale and make sure $RANDOM is padded to 5 bytes.
    false_file=$(printf '%5s' $RANDOM | b32 );
    #the flag string is outputted into this incorrect file.
    FALSE_FLAG=$( echo $RANDOM | mk_hash );
    printf "\n$FLAG_STRING $FALSE_FLAG\n" > $false_file;
    SEARCH_STRING1="$SEARCH_STRING1   $INSTRUCTIONS1 $false_file"

fi
while [[ $first_string_line_num -eq $instruction_line || $second_string_line_num -eq $instruction_line || $third_string_line_num -eq $instruction_line ]]; do
    instruction_line=$(( $RANDOM % $nano_combined_lines));
done
OUTPUT_FILE='nano_combined_built';
#i=27;
i=27;
echo $INSTRUCTIONS0;
#echo $SEARCH_STRING0;
#echo $SEARCH_STRING1;
#echo $SEARCH_STRING2;
echo '' > $OUTPUT_FILE;
while read line; do

    if [[ $i -eq $first_string_line_num ]]; then

        echo -e $SEARCH_STRING0 >> $OUTPUT_FILE;
        echo 'fj:'$i;
     #   let "j++";
        let "i++";

    elif [[ $i -eq $second_string_line_num ]]; then

        echo -e $SEARCH_STRING1 >> $OUTPUT_FILE;
        echo 'sj:'$i;
        let "i++";
#        let "i++";

    elif [[ $i -eq $third_string_line_num ]]; then

        echo -e $SEARCH_STRING2 >> $OUTPUT_FILE;
        echo 'ti:'$i;
  #      let "j++";
        let "i++";

    elif [[ $i -eq $instruction_line ]]; then

        echo -e $INSTRUCTIONS0  >> $OUTPUT_FILE;
        instruction_line1=$i;
    #    echo 'ii:'$i;
        echo 'ii:'$i;
        let "i++";
     #   let "i++";

    fi
    let "i++";

    #let "j++";
    echo -e "$line" >> $OUTPUT_FILE;

done < nano_combined;

#this is because cat will complain if we try to redirect to the same file.
cat '../.header' $OUTPUT_FILE > "$OUTPUT_FILE-1";
#then we move it back again.
mv "$OUTPUT_FILE-1" 'nano_welcome_msg';

num_8=$( printf '%s%4s' 8 '');

#this makes sure that it's got the correct number of spaces to make it all
#aligned the right way.
padding=$(( 18 - ${#instruction_line1}  ));
format_str="%s%${padding}s";

format_str="$(printf $format_str $instruction_line1 '')";

#the final editing of the file.
#this line is to modify the line the instruction are at.
sed -i "s/<instruction_line>/$format_str/g" nano_welcome_msg;
#this line is there to set the level for the flag. Right now it's just 8 but
#technically it's gonna be called text0 for class.
sed -i "s/<num>/$num_8/g" nano_welcome_msg;
#finally set the real flag's file and we're done.
echo -e "\n$FLAG_STRING $FLAG_HOUND" > $FLAG_FILE;
rm -v nano_combined;
rm $OUTPUT_FILE;
rm -v ../../../hounds/hound8/*;
cp -v * ../../../hounds/hound8;
cd ../../../build_scripts;
let level++;

echo "hound$level:$FLAG_HOUND" >> the_flags;
