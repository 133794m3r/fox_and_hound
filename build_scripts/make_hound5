#!/bin/bash
#Hound 5 is the one where they have to extract a lot of files from a hex dumped file.
#Macarthur Inbody <mdi2455@email.vccs.edu> (C) 2019 - 

level=7;
#this reads in the functions that are in the library.
source build_functions;
#we seed $RANDOM with the current level value.
seed_random $level;
#we then make the flag by calling it.
FLAG_HOUND=$( make_flag $level );
#we continue by selecting things semi_randomly.
#when we are in debug mode it'll be calling debug_random
continue_random;
# the old flag.
#FLAG_HOUND5=UGhpbmVhcyBPciBGaW5ueSBGb3gK;
#FLAG_HOUND5=$(echo 'Phineas Or Finny Fox' | base64);
compression_depth=5;
i=0;
filenames=('data' 'file' 'dump' 'binary');
filenames_len=${#filenames[*]};
endnames=('bin' 'data' 'hex' 'dat');
endnames_len=${#endnames[*]};
compression_options=('bz' 'gz' 'tgz' 'txz' 'tar' 'xz');
compression_options_len=${#compression_options[*]};
compression='';

FLAG_STR=$(printf '%s\n' "The password to the next level and the flag is $FLAG_HOUND5");
mkdir -p tmp;
cd tmp;
pwd;
rm -v *;
i=$(( $RANDOM % 2 ));
filename=${filenames[ $(( $RANDOM % $filenames_len ))]}'.'${endnames[ $(( $RANDOM % $endnames_len ))]};
filename2=${filenames[ $(( $RANDOM % $filenames_len ))]}'.'${endnames[ $(( $RANDOM % $endnames_len ))]};
#echo $filename;

#chown 1005 "$filename";
if [[ "$filename2" == "$filename" ]]; then
    filename2=${filenames[ $(( $RANDOM % $filenames_len ))]}'.'${endnames[ $(( $RANDOM % $endnames_len ))]};
fi
if [[ $i -eq 0 ]];then
printf "$FLAG_STR" | base64 > "$filename";
xxd -c 18 "$filename" > "$filename2";
else
printf "$FLAG_STR" | xxd -c 18 > "$filename";
base64 "$filename" > "$filenam2";
fi

echo $filename;
echo $filename2;
cp $filename2 'test';
mv -v $filename2 $filename;

#rm -v $filename;

function compress_file(){
    local input_file=$2;
    local output_file=$3;
    case $1 in
        'bz')
        bzip2 -c9v $input_file > $output_file;
        ;;
        'gz')
        gzip -c9v $input_file > $output_file;
        ;;
        'tgz')
        tar -cvzf $output_file $input_file;
        ;;
        'txz')
         tar -cvJf $output_file $input_file;
        ;;
        'tar')
        tar -cvf $output_file $input_file;
        ;;
        'xz')
        xz -e9vc $input_file > $output_file;
        ;;
    esac
#    rm -v $input_file;
chown 1006 "$output_file";
    return 0;
}
for (( i=0; i<compression_depth; i++)); do
    compression=${compression_options[$(( $RANDOM % $compression_options_len ))]};
    filename2=${filenames[ $(( $RANDOM % $filenames_len ))]}'.'${endnames[ $(( $RANDOM % $endnames_len ))]};
    if [[ "$filename2" == "$filename" ]]; then
        filename2=${filenames[ $(( $RANDOM % $filenames_len ))]}'.'${endnames[ $(( $RANDOM % $endnames_len ))]};
    fi
    
    echo $i;
    echo $compression;
    echo $filename;
    echo $filename2;
    echo '';
    compress_file $compression $filename $filename2;
    rm $filename;
    filename="$filename2";
    
done
cp -v $filename ../../hounds/hound5

#we are doing level+1 since this _flag_ is the _password_ for the next level.
let level++;
#The file we are outputting do is used by the change password script that we're using to modify passwords one-after another
#in an automated fashion.
echo "hound$level:$FLAG_HOUND" >> the_flags;
