#!/bin/bash
#hound5 aka the one where they're grepping the password that appears after the certain string.
#also combines it with strings as the file is full of binary data.
level=5;
#this reads in the functions that are in the library.
source build_functions;
#we seed $RANDOM with the current level value.
seed_random $level;
HASH_ENCODING='b32';
#we then make the flag by calling it.
FLAG_HOUND=$( make_flag 1);
CORRECT_WORD='';
#we continue by selecting things semi_randomly.
#when we are in debug mode it'll be calling debug_random
continue_random;
the_word_len=$( cat '/usr/share/dict/american-english' | wc -l  );
echo "$the_word_len";
correct_word=$( get_random_word '/usr/share/dict/american-english' $the_word_len );
echo 'here';
FILE_NUM_LINES=10;
CORRECT_LINE_NUM=$(( $RANDOM % (FILE_NUM_LINES/2) + 1 ));
cd ../hounds/hound$level;

filename_arr=('somfile' 'something' 'thisfile' '.-' '-~' '-' '.~');
filename_arr_len=${#filename_arr[*]};
extension_arr=('.secrets' '.filthy_lucre' '.files' '.information' '.top_secret' '.hidden' '.mystery' '.txt' '.flag');
extension_arr_len=${#extension_arr[*]};
tmp=$( echo ${filename_arr[*]} | tr ' ' '|' );
rm $( ls -a | egrep "($tmp)" | xargs -i{} printf ' ./{}' );


output_file="${filename_arr[$(( $RANDOM % $filename_arr_len ))]}${extension_arr[$(( $RANDOM % $extension_arr_len ))]}";
false_flag_num=5;
false_flag_line=$(( $RANDOM % ($FILE_NUM_LINES /10 ) ));
echo 'here';
echo '' > "$output_file";
for ((i=0; i<FILE_NUM_LINES;i++)); do
    the_word=$( get_random_word '/usr/share/dict/american-english' $the_word_len );
        echo $i;
    if [[ $i -eq $CORRECT_LINE_NUM ]]; then
        printf  '\n%s %s\n' $the_word $FLAG_HOUND >> "$output_file";
        CORRECT_WORD=$the_word;
    else
        dd if=/dev/urandom status=none bs=1 count=139 >> "$output_file";
        true;
    fi
    if [[ $i -eq $false_flag_line ]]; then
        if [[ $j -eq 0 ]]; then
            false_flag_line=$(( ($RANDOM % 5) + $CORRECT_LINE_NUM ));
        else
            false_flag_line=$(( $false_flag_line + ($RANDOM  % ($FILE_NUM_LINE/10)) ));
            j=1;
        fi
        printf  '\n%s %s\n' $the_word $( make_false_flag '/usr/share/dict/american-english' $the_word_len ) >> "$output_file";
        true;
    fi
    #echo $i;
done
echo $CORRECT_WORD;
