#!/bin/bash
# Hound 10 aka `I have a problem. I know I'll use regex. Now I have 2 problems.`
# Macarthur Inbody
# mdi2455@email.vccs.edu / admin-contact@transcendental.us
# Licenesed under AGPLv3
# (C) 2019 -
# This flag requires them to write a regex that will match the line that has a set of strings. They'll be
# having to search for a string that string that contains some pattern of characters they'll pass this an argument
# to a script that'll then run the regex on the file. The string that it gets will then be passed to tr and it'll be
# cut to make sure that it's a good string. Basically they'll be looking for a string that contains a '.', '$','*',' '
# or the one that has it at the front|end. Or the one that's all lowercase or all uppercase.
if [[ $# -lt 1 ]];then
    level=10;
else
    level=$1;
fi
#the library of build functions.
source build_functions;

#the dictionary file that we're using to get our words from.
#this will be set to a global variable DICTIONARY from the main script once the whole
#build system is done.
password_dict='../dict/passwords_dict';
#get the length of the dictionary file.
#in the future this'll be calculated once from the main build script and then the string
#DICTIONARY_LEN will be set to this value.
password_dict_len=2007;
#set the encoding. In future versions this'll be hardcoded from the main script.
#this is to make sure tha all hashes are b32 encoded.
HASH_ENCODING='b32';

continue_random;
FLAG_STRING='iS';


WORD_ARRAY=(73 106 0 12 13 35 74 75 43 14 66 2);
read -r CURRENT_BUILD < ../notes/current_build_number;
chosen_word=${WORD_ARRAY[$CURRENT_BUILD]};

FLAG_HOUND=$( make_semistatic_flag $chosen_word);
FALSE_FLAG=$( make_false_flag $password_dict $password_dict_len );
read -r -a tmp <<< $( select_regex );
regex_str=${tmp[1]};
regex_case=${tmp[0]}
regex_case0=$regex_case;
read -r -a tmp <<< $( select_regex );
false_regex_str0=${tmp[1]};
regex_case=${tmp[0]}

i=0;
i=0;
while [[ "$regex_case0" = "$regex_case" && $i -lt 255 ]];do
#tmp=$( select_regex );
#tmp=("$tmp");
read -r -a tmp <<< $( select_regex );
    false_regex_str0=${tmp[1]};
    regex_case=${tmp[0]};
    i=$(( $i+1 ));
done
echo $i;
read -r -a tmp <<< $( select_regex );
false_regex_str1=${tmp[1]};
regex_case=${tmp[0]}
while [[ "$regex_case0" = "$regex_case" && $i -lt 255 ]];do
#tmp=$( select_regex );
#tmp=("$tmp");
read -r -a tmp <<< $( select_regex );
    false_regex_str1=${tmp[1]};
    regex_case=${tmp[0]};
    i=$(( $i+1 ));
done
filename='';
#The prefixes for the files
filename_arr=('ALL YOUR BASE ARE BELONG TO.us' '.hidden_file' 'INHERE' 'README' 'INSIDETHIS' 'FILE' 'SECRET' "IT IS A SECRET TO EVERYBODY" 'I AM ERROR' 'I AM BAGU');
#we get the length of the files.
filename_arr_len=${#filename_arr[*]};
filename=${filename_arr[$(( $RANDOM % $filename_arr_len ))]};

NUM_LINES=$(( ($RANDOM % 41) + 62 ));
correct_line=$(( ($NUM_LINES % 28 ) + 27 ));
false_line=$(( $correct_line + ($RANDOM  % 8 )));
false_line2=$(( $correct_line - ($RANDOM % 23) ));
while [[ $correct_line -eq $false_line ]];do
    correct_line=$(( ($RANDOM % 28 ) + 27 ));
    false_line=$(( $correct_line + ($RANDOM  % 8 )));
    false_line2=$(( $correct_line - ($RANDOM % 23) ));
done
tmp_file="tmp$level";
echo -n '' > $tmp_file;
tmp=$( echo ${filename_arr[*]} | tr ' ' '|' );
ls -a ../hounds/hound$level | egrep "($tmp)" | xargs -i{} rm -v "../hounds/hound$level/""{}";

file_location="../hounds/hound$level/$filename"

echo $regex_str;
echo $false_regex_str0;
echo $false_regex_str1;

echo "$FLAG_HOUND";
echo 'cl:'$correct_line;
echo 'fl:'$false_line;
echo 'fl2:'$false_line2;
echo 'fn:'$filename;

for((i=0;i<NUM_LINES;++i)){
    str=$( make_false_flag $password_dict $password_dict_len );
    if [[ $i -eq $correct_line ]];then
        tmp_str=$(printf " $FLAG_HOUND \n" | sed -e "$regex_str");
        printf "$tmp_str\n" >> $tmp_file;
        FLAG_STR="$tmp_str";
    elif [[ $i -eq $false_line2 ]];then
        printf " $str \n"| sed -e "$false_regex_str0" >> $tmp_file;
    else
        printf " $str \n"| sed -e "$false_regex_str1" >> $tmp_file;
    fi
    read -r -a tmp <<< $( select_regex );
    false_regex_str1=${tmp[1]};
    regex_case=${tmp[0]};
    while [[ "$regex_case0" = "$regex_case" && $i -lt 255 ]];do
    #tmp=$( select_regex );
    #tmp=("$tmp");
    read -r -a tmp <<< $( select_regex );
        false_regex_str1=${tmp[1]};
        regex_case=${tmp[0]};
        i=$(( $i+1 ));
    done
}
regex_help=`( select_regex_help_str $regex_case0)`;
IFS='|' read -r -a str_array <<< `( word_wrap_string "$regex_help" 41 )`;
padding=$(( 41 - ${#str_array[0]} ));
GOAL_STR0=`(printf "%s%${padding}s" "${str_array[0]}" '')`;
echo "$GOAL_STR0";
padding=$(( 41 - ${#str_array[1]} ));
GOAL_STR1=`(printf "%s%${padding}s" "${str_array[1]}" '')`;
echo "$GOAL_STR1";
sed -i "s/GOAL_STR0\=.*/GOAL_STR0\='$GOAL_STR0'/" ../home_folders/hound$level/.ssh/rc;
sed -i "s/GOAL_STR1\=.*/GOAL_STR1\='$GOAL_STR1'/" ../home_folders/hound$level/.ssh/rc;
cp -v $tmp_file "$file_location";
cp -v programs/regexer "../hounds/hound$level/regexer";
rm $tmp_file;
regex_test_pattern=`( select_regex_test_pattern $regex_case0 )`;
TEST_STRING=`(sed -n "$regex_test_pattern" "$file_location")`
if [[ $TEST_STRING == $FLAG_STR ]];then
    echo 'It worked. Both values are the same.';
else
    echo "It didn't work. Try again. The shown regex pattern was $regex_test_pattern and the pattern that modified the line was $regex_str";
fi
let level++;
pwd;
echo "hound$level:$FLAG_HOUND" >> the_flags;
