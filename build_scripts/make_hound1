#!/bin/bash
#Hound 1 Build Script
# Macarthur Inbody <mdi2455@email.vccs.edu> 2019- AGPLv3
# Hound 1 aka Special characters never stopped me before! Go cat go!
# Working with special characters in the filename.
#This flag requires them to read the file either via cat ./<FILENAME> or cat '<FILENAME>'

if [[ $# -lt 1 ]];then
    #this is the level that this flag is going to be identified as.
    level=1;
else
    level=$1;
fi
#this reads in the functions that are in the library.
source build_functions;
#we seed $RANDOM with the current level value.
seed_random $level;

HASH_ENCODING='b32';

#we then make the flag by calling it.
FLAG_HOUND=$( make_flag 1);
#we continue by selecting things semi_randomly.
#when we are in debug mode it'll be calling debug_random
continue_random;
# the old flag.
#FLAG_HOUND1='k3uLis-bFoOtxl8wBllZsKapwqM';

HASH_ENCODING='b32';

#The prefixes for the files. Since they are having to deal with special characters it is stored
#as strings to make it easier but it's no necessary for normal strings.
#there is no suffix because they need to learn that suffixes are not needed in linux.
filename_arr=('.-' '-~' '-.' '.~');
filename_arr_len=${#filename_arr[*]};
#This line removes the old flag and puts the new file in there.
cd ../hounds/hound1/
tmp=$( echo ${filename_arr[*]} | tr ' ' '|' );
#echo "$tmp";
rm -v './'$( ls -a | egrep "($tmp)");

file_name=${filename_arr[$(( $RANDOM % $filename_arr_len ))]};



echo "The flag is $FLAG_HOUND" > ./$file_name;
#chown 1002 ./"$file_name";
#then we go back to the build scripts directory so that we can output to it our file that'll
#hold the flag and the username for the next user.
cd ../../build_scripts
#cd ../../build_scripts;
#we are doing level+1 since this _flag_ is the _password_ for the next level.
let level++;
#The file we are outputting do is used by the change password script that we're using to modify passwords one-after another
#in an automated fashion.
echo "hound$level:$FLAG_HOUND" >> the_flags;
