#!/bin/bash
# Hound 0:  AKA `Cat presents:Give me the flag!`
# Macarthur Inbody
# mdi2455@email.vccs.edu / admin-contact@transcendental.us
# Licenesed under AGPLv3
# (C) 2019 -
#Reading the contents of a file/listing contents of a directory.
#
# This script creates the flag for hound level 0. This level requires the student
# to utilize basic linux commands to read the file. To make sure that they have to
# utilize ls to see the list of files the filename is randomized.


if [[ $# -lt 1 ]];then
    #this is the level that this flag is going to be identified as.
    level=0;
else
    level=$1;
fi
# shellcheck disable=SC2034
HASH_ENCODING='b32';

#this reads in the functions that are in the library.
source build_functions;

WORD_ARRAY=(33 8 96 75 2 104 0 1 3 34 35 9);
read -r CURRENT_BUILD < ../notes/current_build_number;
chosen_word=${WORD_ARRAY[$CURRENT_BUILD]};
FLAG_HOUND=$( make_semistatic_flag "$chosen_word");

# This is an array of prefixes for the file.
file_prefix=('INHERE' 'README' 'INSIDETHIS' 'FILE' 'SECRET');
# We then get the length so that it's no hardcoded.
file_prefix_len=${#file_prefix[*]};
file_suffix=('txt' 'flag' 'secret');
file_suffix_len=${#file_suffix[*]};
#This line removes the old flag and puts the new file in there.
cd ../hounds/hound0/ || exit;


# We take the file's contents pass it through to tr and replace the ' ' character separator
# for a '|' operator for regex purposes.
tmp=$( echo "${file_suffix[*]}" | tr ' ' '|' );
# we ls the contents of the directory, then we grep via regex the output for a list
# of the sufffexes. Then we take that output and rm those files matching it.
rm -v $( ls | grep -E "($tmp)");
# the filename is in teh form of RANDOM_FILE_PREFIX.RANDOM_FILE_SUFFIX
# it selects a random element from the array that is from 0-(ARRAY_LEN-1). It is inside of a subshell which is then
# expanded into a value representing that element of the array.
file_name=${file_prefix[$(( RANDOM % file_prefix_len ))]}'.'${file_suffix[$(( RANDOM % file_suffix_len ))]};
# we include the flag inside of "" to make sure it's escaped properly, then we cat the file to the selected filename.
echo "The flag is $FLAG_HOUND" >$file_name;
FLAG_STR="The flag is $FLAG_HOUND";
CHECK_FILE=$(cat ./$( ls -A) );
if [[ $FLAG_STR = "$CHECK_FILE" ]];then
    echo "It's alive. It's alive. Another thing is made.";
else
    echo "$FLAG_STR and got $CHECK_FILE";
    echo "Someone messed up. Better review it manually.";

fi
#then we go back to the build scripts directory so that we can output to it our file that'll
#hold the flag and the username for the next user.
cd ../../build_scripts || exit
#cd ../../build_scripts;
#we are doing level+1 since this _flag_ is the _password_ for the next level.
(( level++ ));
#The file we are outputting do is used by the change password script that we're using to modify passwords one-after another
#in an automated fashion.

echo "hound$level:$FLAG_HOUND" >> the_flags;
