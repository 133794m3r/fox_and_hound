#!/bin/bash
# hound 0 build script.
# Macarthur Inbody <mdi2455@email.vccs.edu>
# AGPLv3
# 2019 -
# Hound 0: Reading the contents of a file/listing contents of a directory.
#
# This script creates the flag for hound level 0. This level requires the student
# to utilize basic linux commands to read the file. To make sure that they have to
# utilize ls to see the list of files the filename is randomized.
if [[ $# -lt 1 ]];then
    #this is the level that this flag is going to be identified as.
    level=0;
else
    level=$1;
fi
#this reads in the functions that are in the library.
source build_functions;
#we seed $RANDOM with the current level value.
#next version during testing will use this information.
seed_random $level;
#we then make the flag by calling it.
FLAG_HOUND=$( make_flag 1);
#echo $( make_flag $level 1 );
#we continue by selecting things semi_randomly.
#when we are in debug mode it'll be calling debug_random
continue_random;
# the old flag.
#FLAG_HOUND='-WeE1KX.EkmECsU-xKSki7cSQb8';

# This is an array of prefixes for the file.
file_prefix=('INHERE' 'README' 'INSIDETHIS' 'FILE' 'SECRET');
# We then get the length so that it's no hardcoded.
file_prefix_len=${#file_prefix[*]};
file_suffix=('txt' 'flag' 'secret');
file_suffix_len=${#file_suffix[*]};
#This line removes the old flag and puts the new file in there.
cd ../hounds/hound0/
i=0;
#for (( i=0; i<$file_suffix_len; i++ )){
#    rm *'.'${file_suffix[i]};
#}

# We take the file's contents pass it through to tr and replace the ' ' character separator
# for a '|' operator for regex purposes.
tmp=$( echo ${file_suffix[*]} | tr ' ' '|' );
# we ls the contents of the directory, then we grep via regex the output for a list
# of the sufffexes. Then we take that output and rm those files matching it.
rm $( ls | egrep "($tmp)");
# the filename is in teh form of RANDOM_FILE_PREFIX.RANDOM_FILE_SUFFIX
# it selects a random element from the array that is from 0-(ARRAY_LEN-1). It is inside of a subshell which is then
# expanded into a value representing that element of the array.
file_name=${file_prefix[$(( $RANDOM % $file_prefix_len ))]}'.'${file_suffix[$(( $RANDOM % $file_suffix_len ))]};
# we include the flag inside of "" to make sure it's escaped properly, then we cat the file to the selected filename.
echo "The flag is $FLAG_HOUND" >$file_name;

#then we go back to the build scripts directory so that we can output to it our file that'll
#hold the flag and the username for the next user.
cd ../../build_scripts
#cd ../../build_scripts;
#we are doing level+1 since this _flag_ is the _password_ for the next level.
let level++;
#The file we are outputting do is used by the change password script that we're using to modify passwords one-after another
#in an automated fashion.
echo "hound$level:$FLAG_HOUND" >> the_flags;
