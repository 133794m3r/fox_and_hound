#!/bin/bash
# Hound4: AKA The Hound must find a file that's ASCII Text in type.
# Macarthur Inbody <mdi2455@email.vccs.edu> 
# 2019- 
# AGPLv3
# this flag requires them to utilize the `find` command or grep to find a file
# that is ASCII-Text but nothing else.
# they can also utilize grep(though this is a secret option) with the -I option to ignore
# binary files and look for an empty string.

#the level we're at.
level=4;
#this reads in the functions that are in the library.
source build_functions;
#we seed $RANDOM with the current level value.
seed_random $level;
#we then make the flag by calling it.
FLAG_HOUND=$( make_flag $level 1);
#we continue by selecting things semi_randomly.
#when we are in debug mode it'll be calling debug_random
continue_random;
# the old flag.
#FLAG_HOUND4='3h9GplLdLnj9e6uYVToiNMBLFcY';

#this is how many= files each directory holds. It's set at 15
#which means 15 files to sift through. They are _all_ the same length so they can't rely
#upon that and the file name changes each time. So _only_ find or grep will get the right answer.
MAX=15;
#we select _which_ of the files will hold the flag. The rest will be binary data.
correct_flag=$(( $RANDOM % MAX ));
#the filename we're going to use. It's an empty string by default.
filename='';
#The prefixes for the files
filename_arr=('.-' '-~' '-.' '.~' 'this file has spaces' 'spaces in the name');
#we get the length of the files.
filename_arr_len=${#filename_arr[*]};
#the suffixes for the files, I'm not doing .dat, or .hex, or .bin etc so that they don't get confused.
endname_arr=('filename' 'files' 'texts' 'flags');
#the length.
endname_arr_len=${#endname_arr[*]};
#we select an option from each array via subshell expansion and through direct array element access.
#basically like other ones it's from 0-max for the array elements. Bash makes the length be one higher
#than the max element you can get(for whatever reason). So this "hack" works as the modulu always makes it no more than
#that number minux 1.
filename=${filename_arr[ $(( $RANDOM % $filename_arr_len ))]}${endname_arr[ $(( $RANDOM % $endname_arr_len ))]};
#the directory names. They are all hidden so that they have to use previous knowledge to see the files.
#plus it makes it a tad bit harder to find.
dirname_arr=('.secrets' '.filthy_lucre' '.files' '.information' '.top_secret' '.hidden' '.mystery');
#get the length.
dirname_arr_len=${#dirname_arr[*]};
#the first directory name.
dirname=${dirname_arr[$(( $RANDOM % dirname_arr_len ))]};


#rm -rvf ../hounds/hound5/.secret/*
#remove the directory that held the old files.
rm -rvf bunch_dirs;
#make a new one permissively for safety reasons.
mkdir -p bunch_dirs;
#we go there.
cd bunch_dirs;
#the name which is just a number that's padded to 2 digits so that
#the thing is sorted properly in ls. A minor pet peeve of mine is fixed this way.
name='';
#the for loop that creates the files.
for (( i=0; i<=$MAX; i++));do
name=$i;
#if it's <=9 it adds a '0' before the num to make it 2 digits.
if(( $i <=9 ))
then
    name="0$i";
fi
#if it's the correct one we then write the file out.
#adding an extra string at the end makes sure they all are in order.
    if [[ $i -eq $correct_flag ]];
    then
        #echo $FLAG_HOUND4 > '-file'"$name";
        #the flag is outputted to the file. The name is something like '-.texts'
        echo $FLAG_HOUND4 > "$filename$name"
    else
    	#dd if=/dev/random bs=1 count=29 status=none > "-file$name";
    	#otherwise we read from /dev/random and pipe the output to that file.
    	dd if=/dev/random bs=1 count=28 status=none > "$filename$name";
    fi
done
echo 'done';
#go back up dir.
cd ..;
#go to the directory where the files will live.
cd ../hounds/hound4;
#don't know why I did this. I could just set it to a blank string. Oh well.
#tmp=${dirname_arr[0]};
#for (( i=1; i<$dirname_arr_len; i++ )); do
#    tmp="$tmp|${dirname_arr[$i]}";
#done
tmp=$( echo ${dirname_arr[*]} | tr ' ' '|' );
#delete them.
rm -vdR $tmp;
#otherwise the above could would not be needed at all.
#ls -a | egrep "($tmp)"| tr '|' '\n'|xargs -d'\n' rm -vdR
#make sure I'm where I think I am a remnance of debugging my directory traversal scripts.
pwd;
#this makes sure that it dies incase of some error.
cd ../../build_scripts || exit;
#we make the directory that's going to hold the files.
mkdir ../hounds/hound4/"$dirname";
#chown -R 1005 bunch_dirs;
#we then copy them all over from the old one to the new area.
cp -Rv bunch_dirs/. ../hounds/hound4/"$dirname";
#we remove the bunch_dirs directory as it's a waste of space.
rm -rv bunch_dirs;
#cd ../../build_scripts;
#we are doing level+1 since this _flag_ is the _password_ for the next level.
let level++;
#The file we are outputting do is used by the change password script that we're using to modify passwords one-after another
#in an automated fashion.
echo "hound$level:$FLAG_HOUND" >> the_flags;
