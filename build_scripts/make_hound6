#!/bin/bash
#Hound 6 requires them to find a file from amonst many seperate files.
#Macarthur Inbody <mdi2455@email.vccs.edu> (C) 2019-

#TODO: Look into additional options.
#all config variables are at the top of the file to make it easier to change.
#TODO: Make it so that the permissions, owner, group, and size all change randomly and it has a check to make sure that the user can read and execute it

level=6;
#this reads in the functions that are in the library.
source build_functions;
#we seed $RANDOM with the current level value.
seed_random $level;
#we then make the flag by calling it.
FLAG_HOUND=$( make_flag $level );
#we continue by selecting things semi_randomly.
#when we are in debug mode it'll be calling debug_random
continue_random;
# the old flag.
#HOUND6_FLAG=$( echo 'Phineas the Fox' | openssl dgst -sha1 -binary | base64 | tr -d '=');


HOUND6_STR='The flag is ';

i=0;
j=0;
#HOUND6_FLAG l0pMty8KC2HxqKBni+XzWWm7jfk
#Number of directories.
directory_number=20;
#number of files per directory
file_number=10;
filename_arr=('.-' '-~' '-.' '.~');
filename_arr_len=${#filename_arr[*]};
filename='';
endname_arr=('filename' 'files' 'texts' 'flags');
endname_arr_len=${#endname_arr[*]};
suffix_arr=('.txt' '.dat' '.bin' '.hex' '.file' '.secrets');
suffix_arr_len=${#suffix_arr[*]};
suffix='';
dirname_arr=('.secrets' '.filthy_lucre' '.files' '.information' '.top_secret' '.hidden' '.mystery' '.hidden_treasures' '.maybeinhere' '.treasure_chest');
dirname_arr_len=${#dirname_arr[*]};
dirname='';

#by default all the correct options are at the end.

#the permissions in numeric form.

permission_array=(755 777 765 744 751);
permission_array_len=${#permission_array[*]};

file_type_arr=('binary' 'text' 'zero');
file_type_arr_len=${#file_type_arr[*]};
#the file size for the correct one7

#padding string function $(printf "%${<bytes_to_pad>}s" "<string>");
file_size_array=(1335 29 1336);
file_size_array_len=${#file_size_array[*]};
size=0;
#the owner user id/name.
#1007=hound6
owner_array=(1005 1006 1007);
owner_array_len=${#owner_array[*]};
owner=0;
#1006=hound5 group
group=0;
group_array=(1005 1007 1006);
group_array_len=${#group_array[*]};

#correct_owner=1007
#correct_permissions=751;
#correct_group=1006
#correct_size=1336
file_type_correct='text';

#function's not needed.
#function make_correct_metadata(){
correct_owner=${owner_array[$(( $RANDOM % owner_array_len ))]};
correct_group=${group_array[$(( $RANDOM % group_array_len ))]};    
correct_permission=${permission_array[$(( $RANDOM % permission_array_len ))]};
correct_size=${size_array[$(( $RANDOM % size_array_len ))]};
if [[ $correct_permission = 751 && ( $correct_group -ne 1007 || $correct_owner -ne 1006 )]]; then
    correct_permission=${permission_array[$(( $RANDOM % ( permission_array_len -1 ) ))]};
fi
#    return 0;
#}
#make_correct_me

#we have to edit the .ssh/rc file in the home directory so that it contains this data.
sed "s/permission\=.*/permission\=$correct_permission/" ../home_folders/hound6/.ssh/rc;
sed "s/owner\=.*/owner\=$correct_owner/" ../home_folders/hound6/.ssh/rc;
sed "s/group\=.*/group\=$correct_group/" ../home_folders/hound6/.ssh/rc;
sed "s/size\=.*/size\=$correct_size/" ../home_folders/hound6/.ssh/rc;

#the amount of partial matches to include by default it's 1 per directory.
#with the remaining files have random bits of the pattern correct.
red_herrings=directory_number;
#this assumes that file that is correct is counting from 0 like normal.
#this is set for each directory as the file that will be correct.
#the redherring will always be selected as a value that is this value +1 but then
#it wraps around.
correct_file=$(( ($RANDOM % ($file_number*$directory_number)) ));
l=0;
red_herring_file=$(( $RANDOM % $file_number ));
if [[ $red_herring_file -gt $(( $file_number - 1 )) ]];
then
red_herring_file=0;
red_herring_file2=$(( $RANDOM % $file_number));
fi

if [[ $red_herring_file2 -gt $(( $file_number - 1 )) ]];
then
red_herring_file2=0;
fi
if [[ $red_herring_file2 -eq $red_herring_file ]];then
    red_herring_file2=$(($red_herring_file+1));
fi
if [[ $red_herring_file2 -gt $(( $file_number - 1 )) ]];
then
red_herring_file2=0;
fi
if [[ $red_herring_file2 -eq $red_herring_file ]];then
    red_herring_file2=$(($red_herring_file+1));
fi
function red_herring_options(){
	incorrect_file_metadata=$(( $RANDOM % 4));
	local permission=751;
	local owner=1007;
	local group=1006;
	local file_size=1336;
#the arrays where it redoes it has to be made sure that
#the index it uses _does not_ match the actual file size
#by default the correct one is at the end.
	case $incorrect_file_metadata in
	0)
	    permission=${permission_array[$(( $RANDOM % $permission_array_len ))]};
        if [[ $permission -eq $correct_owner ]]; then
            permission=${permission_array[0]};
        fi
	;;
	1)
	    group=${group_array[$(( $RANDOM % $group_array_len ))]};
        if [[ $group -eq $correct_group ]]; then
            group=${group_array[0]};
        fi
	;;
	2)
	   file_size=${file_size_array[$(( $RANDOM % $file_size_array_len ))]};
        if [[ $file_size -eq $correct_size ]]; then
            file_size=${file_size_array[0]};
        fi
	;;
	3)
	   owner=${owner_array[$(( $RANDOM % $owner_array_len))]};
        if [[ $owner -eq $correct_owner ]]; then
            owner=${owner_array[0]};
        fi
	;;
	esac
#	read -r -a options_array <<< "$permission $owner $group $file_size";
	echo "$permission $owner $group $file_size";
}
function make_false_file(){

    #local FILE_CONTENTS;
    local tmp_str=$(echo $RANDOM | openssl dgst -sha1 -binary | base64 | tr -d '=');
    case $file_type in
        'text')
            printf "\n%${size}s\n" "$HOUND6_STR $tmp_str" > "$filename$j$suffix";
        ;;
        'binary')
            dd if=/dev/urandom bs=1 count=$(( $size+1 )) status=none of="$filename$j$suffix";
        ;;
        'zero')
            dd if=/dev/zero bs=1 count=$(( $size+1 )) status=none of="$filename$j$suffix";
            ;;
    esac
}

rm -Rvdf /tmpdownload/tmp;
mkdir /tmpdownload/tmp;
cd /tmpdownload/tmp;
arr='';
tmp_str='';
FILE_CONTENTS='';
random_number=$(( $RANDOM % $dirname_arr_len ));

echo $correct_file;
echo $red_herring_file;
echo $red_herring_file2;
tmp_herring=$red_herring_file;
tmp_herring2=$red_herring_file2;

for ((i=0; i < $directory_number; i++)); do
    dirname=${dirname_arr[$(( $RANDOM % $dirname_arr_len )) ]};
    mkdir -v "$dirname$i";
    chmod 777 "$dirname$i";
    cd "$dirname$i";
    filename=${filename_arr[$(($RANDOM % $filename_arr_len))]}${endname_arr[$(($RANDOM % $endname_arr_len))]};
    suffix=${suffix_arr[$(($RANDOM % $suffix_arr_len))]};
    
    for (( j=0; j < file_number; j++ )); do
        size=${file_size_array[$(( $RANDOM % $file_size_array_len ))]};
        owner=${owner_array[$(( $RANDOM % $owner_array_len ))]};
        group=${group_array[$(( $RANDOM % $group_array_len ))]};
        permission=${permission_array[$(( $RANDOM % $permission_array_len))]};

        #echo $l;
        if [ $l -eq $correct_file ]; then
            #FILE_CONTENTS=$(printf "%${correct_size}s\n" "$HOUND6_STR $HOUND6_FLAG");
            printf "\n%${correct_size}s\n" "$HOUND6_STR $HOUND6_FLAG" > "$filename$j$suffix";
            echo 'correct_file'"$filename$j$suffix";
            owner=$correct_owner; group=$correct_group; permission=$correct_permissions;
            tmp_herring=$red_herring_file; tmp_herring2=$red_herring_file2;
            if [[ $j -eq $red_herring_file ]]; then
                tmp_herring=$(($tmp_herring+1));
            elif [[ $j -eq $red_herring_file2 ]]; then
                tmp_herring2=$(($tmp_herring2+1))
            fi
            if [[ $tmp_herring > $(( $file_number - 1 )) ]];then
                tmp_herring=0;
            fi
            if [[ $tmp_herring -eq $tmp_herring2 ]];then
                tmp_herring2=$(($tmp_herring2+1));
            fi
            if [[ $red_herring_file2 > $(( $file_number - 1 )) ]];then
                tmp_herring2=0;
            fi
            if [[ $tmp_herring -eq $tmp_herring2 ]];then
                tmp_herring2=$(($tmp_herring2+1));
            fi
        elif [ $j -eq $red_herring_file ]; then
            read -r -a arr <<< $(red_herring_options);
            #echo 'rh1:'${arr[@]};
            permission=${arr[0]}; owner=${arr[1]}; group=${arr[2]}; size=${arr[3]};
            tmp_str=$(echo $RANDOM | openssl dgst -sha1 -binary | base64 | tr -d '=');
            #FILE_CONTENTS=$(printf "%${size}s\n" "$HOUND6_STR $tmp_str");
            printf "\n%${size}s\n" "$HOUND6_STR $tmp_str" > "$filename$j$suffix";
        elif [[ $j -eq $tmp_herring_file2 ]]; then
            read -r -a arr <<< $(red_herring_options);
           #echo 'rh2:'${arr[@]};
            permission=${arr[0]}; owner=${arr[1]}; group=${arr[2]}; size=${arr[3]};
            tmp_str=$(echo $RANDOM | openssl dgst -sha1 -binary | base64 | tr -d '=');
            #FILE_CONTENTS=$(printf "%${size}s\n" "$HOUND6_STR $tmp_str");
            printf "\n%${size}s\n" "$HOUND6_STR $tmp_str" > "$filename$j$suffix";
        else
          #echo 'other';
            file_type=${file_type_arr[$(($RANDOM % file_type_arr_len))]};
            #            if [[ $permission -eq $correct_permission && $file_type -eq 'text' && $size -eq $correct_size && $owner -eq $correct_owner && $group -eq $correct_group ]]; then
            if [[ $permission -eq $correct_permission && $file_type -eq 'text' && $size -eq 1336 && $owner -eq 1007 && $group -eq 1006 ]]; then
            #echo 'we have a hit';
                permission=${permission_array[0]};
            fi
            #FILE_CONTENTS=$(make_false_file $file_size $file_type);
            make_false_file;
        fi
        if [[ $owner -eq $correct_owner && $group -eq $correct_group && $permission -eq $correct_permission  ]];then
            permission=755;
        fi
        #echo "$filename$j$suffix";
        #echo "$owner:$group";
        chown "$owner:$group" ./"$filename$j$suffix";
        #echo "$permission";
        chmod "$permission" ./"$filename$j$suffix";
        l=$((l+1));
    done;
    
    cd ..;
done;
rm -Rv /home/macarthur/misc_proj/fox_ctf/hounds/hound6;
mkdir -p /home/macarthur/misc_proj/fox_ctf/hounds/hound6;
pwd;
cp -aR . /home/macarthur/misc_proj/fox_ctf/hounds/hound6;
#chmod 755 /home/macarthur/misc_proj/fox_ctf/hounds/hound6;
chown 1007:1007 /home/macarthur/misc_proj/fox_ctf/hounds/hound6/.*
#false flag function to make a string that looks like the legit one.
#this is used for the redherring's if the length matches up.
# $(echo $RANDOM | openssl dgst -sha1 -binary | base64 | tr -d '='); 
