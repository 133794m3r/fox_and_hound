#!/bin/bash
# Hound3: AKA You think you can hide me? I am a master of detection!
# Macarthur Inbody
# mdi2455@email.vccs.edu / admin-contact@transcendental.us
# Licenesed under AGPLv3
# (C) 2019 -
# working with hidden files.
# This flag requires the user to find a hidden file
#then read the contents of the file. As they previously
#had to read a file with spaces this is a hearken back to that moment.
if [[ $# -lt 1 ]];then
    level=3;
else
    level=$1;
fi
HASH_ENCODING='b32';

#this reads in the functions that are in the library.
source build_functions;
#we seed $RANDOM with the current level value.
seed_random $level;
#we then make the flag by calling it.
#FLAG_HOUND=$( make_flag 1);
#we continue by selecting things semi_randomly.
#when we are in debug mode it'll be calling debug_random
continue_random;
WORD_ARRAY=(6 105 44 106 7 14 42 15 45 16 100 17);
read -r CURRENT_BUILD < ../notes/current_build_number;
chosen_word=${WORD_ARRAY[$CURRENT_BUILD]};
FLAG_HOUND=$( make_semistatic_flag $chosen_word);

# the old flag.
#FLAG_HOUND3='jEKpny.vBXBCLg5EA.D-RKZPH8w';

#the filenames and directories are chosen to make it _impossible_ for them to _not_ actually use ls to get the directories.
#also this one is one where they're trying to find a hidden file thus the folders all begin with a '.'. This will make it
#so that they have to combine cd, and ls -a to get into the only directory in their folder.

#this array holds hte file names that the user is going to be trying to cat.
filename_arr=('this file has spaces' 'name has spaces' 'space character' 'many spaces within it' 'within the filename spaces');
#then we get the length.
filename_arr_len=${#filename_arr[*]};
#followed by selecting a random element from 0-(len-1)
filename=${filename_arr[$(( $RANDOM % $filename_arr_len ))]};
#ditto of above all through here.
dirname_arr=('.secrets' '.filthy_lucre' '.files' '.information' '.top_secret' '.hidden' '.mystery');
dirname_arr_len=${#dirname_arr[*]};
#followed by selecting a random element from 0-(len-1)
dirname=${dirname_arr[$(( $RANDOM % $dirname_arr_len ))]};
#we go to the folder where the data will live.
cd ../hounds/hound3;
#this is to make sure to deal with files that have spaces in their name as we're looking for certain ones
#just in case there are ones in the home directory that do have spaces in their
#names.
#tmp=${dirname_arr[0]};
#for (( i=1; i<$dirname_arr_len; i++ )){
#    tmp="$tmp|${dirname_arr[$i]}";
#}
#otherwise the above could would no be needed at all.
#this is the new onliner to simplify sloc that are executed.
tmp=$( echo ${dirname_arr[*]} | tr ' ' '|' );
#we remove the directory and the files and are verbose in output.
rm -vRf $( ls -a | egrep "($tmp)" );
#ls -a | egrep "($tmp)"| tr '|' '\n'|xargs -d'\n' rm -vdR
#'and this line; tr could be removed and it would just be a `ls | egrep "(\ )" | rm -v` that is it'.

#the -p is _solely_ there incase something seriously goes wrong and we have a folder left over.
mkdir -p $dirname;
#then we go to that directory.
cd $dirname;




#we put the flagl in the file through pipes.
echo "$FLAG_HOUND" > "$filename";
CHECK_FILE=$( cat ./"$( ls -A )" );
if [[ $FLAG_HOUND = $CHECK_FILE ]];then
    echo "It worked. Somehow it worked. Don't question it. Doing so is a folly.";
else
    echo "Someone messed up. Better review it manually.";
fi
#chown -R 1004 "$filename";
#then we go back to the build scripts directory so that we can output to it our file that'll
#hold the flag and the username for the next user.
cd ../../../build_scripts
#cd ../../build_scripts;
#we are doing level+1 since this _flag_ is the _password_ for the next level.
let level++;
echo "$dirname/$filename";
echo "$FLAG_HOUND";
#The file we are outputting do is used by the change password script that we're using to modify passwords one-after another
#in an automated fashion.
echo "hound$level:$FLAG_HOUND" >> the_flags;
