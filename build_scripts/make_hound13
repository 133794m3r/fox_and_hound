#!/bin/bash
# Hound 13: Work it, let me work it. Flip it and reverse it. ti tuc ,ti rt ,ti ver ,ti qinu ,ti troS
# This hound flag will combine the following commands into one. They'll sort a file, then get the only uniq
# line. After that, reverse the string, tr it from mixed-case to lowercase. Then the flag is the second field.
# so if they use cut they can instantly get it.
# Macarthur Inbody
# mdi2455@email.vccs.edu / admin-contact@transcendental.us
# Licenesed under AGPLv3
# (C) 2019 -

# shellcheck disable=SC2034
HASH_ENCODING='b32';
if [[ $# -lt 1 ]];then
    level=13;
else
    level=$1;
fi
declare -i i=0;

source build_functions;

WORD_ARRAY=(6 7 70 101 102 45 71 18 19 20 65 79);
read -r CURRENT_BUILD < ../notes/current_build_number;
chosen_word=${WORD_ARRAY[$CURRENT_BUILD]};
FLAG_HOUND=$( make_semistatic_flag "$chosen_word");
#the dictionary file that we're using to get our words from.
#this will be set to a global variable DICTIONARY from the main script once the whole
#build system is done.
dictionary='../dict/passwords_dict';
#get the length of the dictionary file.
#in the future this'll be calculated once from the main build script and then the string
#DICTIONARY_LEN will be set to this value.
dictionary_len=2007

#the filename we're going to use. It's an empty string by default.
filename='';
#The prefixes for the files
filename_arr=('.-' '-~' '-.' '.~' 'INHERE' 'README' 'INSIDETHIS' 'FILE' 'SECRET');
#we get the length of the files.
filename_arr_len=${#filename_arr[*]};
filename_ext_arr=('.txt' '.dat' '.md' '.notes' .'flag');
filename_ext_arr_len=${#filename_ext_arr[*]};
filename="${filename_arr[$(( RANDOM % filename_arr_len ))]}${filename_ext_arr[$(( RANDOM % filename_ext_arr_len))]}";



prefix_string='flag ';
declare -i number_lines=$(( (RANDOM % 30) + 40 ));
FLAG_STR="flag $FLAG_HOUND";
flag_string=$( echo "flag $FLAG_HOUND" | sed '/\n/!G;s/\(.\)\(.*\n\)/&\2\1/;//D;s/.//'  | sed -r 's/([a-z])([^a-z]*.?)/\U\1\L\2/gi' );
string_to_write="$flag_string";
false_flag='';
for((i=0;i<number_lines;i++));do
    false_flag=$( make_false_flag $dictionary $dictionary_len );
    false_flag=$( echo "flag $false_flag" | sed '/\n/!G;s/\(.\)\(.*\n\)/&\2\1/;//D;s/.//'  | sed -r 's/([a-z])([^a-z]*.?)/\U\1\L\2/gi');
    string_to_write="$false_flag\n$string_to_write\n$false_flag";
done
cd ../hounds/hound13 || exit;

tmp=$( echo "${filename_arr[*]}" | tr ' ' '|' );
#remove the old file.
#it doesthe following. First we list all of the files in the directory. Then we pipe it to egrep and search for all of the keys that we have chosen.
#then it sends those values to xargs and we tell it to replace all instances of {} with the argument. Then we use printf to insert into the final
#string utilizing printf to make each instance of the file as ./<filename> so that it can be rmed more easily. Finally the shell expands the value
#converts it to a string, this string is then converted into a set of arguments to be utilized by rm. This way there are no errors about a file not
#being found as rm only sees existing files because we only pass those that have been grepped.
rm -v $( ls -A | egrep "($tmp)" | xargs -i{} printf ' ./{}' );

printf "$string_to_write" | shuf -  > "$filename";
TEST_STR=$( cat ./$(ls -A) | sort | uniq -u | rev | tr 'A-Z' 'a-z' | cut -d' ' -f2 );
if [[ $TEST_STR == "$FLAG_HOUND" ]];then
    echo "Hound$level was built successfully.";
else
    echo "Hound$level not built correctly. Test failed.";
    echo "We expected:$FLAG_HOUND";
    echo "We received:$TEST_STR";
    printf "%s" "The command we tried was \n cat ./\$(ls -A) | sort | uniq -u | rev | tr 'A-Z' 'a-z' | cut -d' ' -f2\n";
    echo "Please try to do the command again from the target folder to verify that it wasn't just a weird typo.";
fi
cd ../../build_scripts || exit;
(( level++ ));
echo "hound$level:$FLAG_HOUND" >> the_flags;
