#!/bin/bash
# Hound 2 aka Spaces! Why did it have to be spaces. You darned dirty spaces!
# Macarthur Inbody <mdi2455@email.vccs.edu> 2019- AGPLv3
# Hound flag that involves dealing with spaces in the file name.

HASH_ENCODING='b32';
if [[ $# -lt 1 ]];then
    level=2;
else
    level=$1;
fi
#this reads in the functions that are in the library.
source build_functions;
#we seed $RANDOM with the current level value.
seed_random $level;
#we then make the flag by calling it.
#FLAG_HOUND=$( make_flag 1);
#we continue by selecting things semi_randomly.
#when we are in debug mode it'll be calling debug_random
continue_random;
# the old flag.
#FLAG_HOUND='X3kIeNDOe41RPMD0H7Oxt88fmlg';
WORD_ARRAY=(8 39 40 41 42 43 44);
tmp_rnd=`( dd if=/dev/urandom bs=2 count=1 status=none | od -A n -t u )`;
#chosen_word=${WORD_ARRAY[$(( $RANDOM % 7 ))]};
chosen_word=${WORD_ARRAY[$(( $tmp_rnd % 7 ))]};
FLAG_HOUND=$( make_semistatic_flag $chosen_word);

#The array with the filenames in it.
filename_arr=('this file has spaces' 'name has spaces' 'space character' 'many spaces within it' 'within filename spaces');
#caclulate the length fo the array.
filename_arr_len=${#filename_arr[*]};
#go to the directory.
cd ../hounds/hound2/
#this is to make sure to deal with files that have spaces in their name as we're looking for certain ones
#just in case there are ones in the home directory that do have spaces in their
#names.
tmp="${filename_arr[0]}";
# this loop is no longer needed.
for (( i=1; i<$filename_arr_len; i++ ));do
    tmp="$tmp|${filename_arr[$i]}";
done

#instead we just echo the contents to tr!
#tmp=$( echo ${filename_arr[*]} | tr ' ' '|' );

#otherwise the above could would no be needed at all.
ls | egrep "($tmp)"| tr '|' '\n'|xargs -d'\n' rm -v
#rm -v './'$( ls -a | egrep "($tmp)");

file_name=${filename_arr[$(( $RANDOM % $filename_arr_len ))]};


echo "$FLAG_HOUND" > "$file_name";
#1003 is the user's id.
#this isn't needed as the user's just extracting the file.
#chown 1003 "$file_name";

#then we go back to the build scripts directory so that we can output to it our file that'll
#hold the flag and the username for the next user.

cd ../../build_scripts
#cd ../../build_scripts;
#we are doing level+1 since this _flag_ is the _password_ for the next level.
let level++;
#The file we are outputting do is used by the change password script that we're using to modify passwords one-after another
#in an automated fashion.
echo "$FLAG_HOUND";
echo "$file_name";
echo "hound$level:$FLAG_HOUND" >> the_flags;
