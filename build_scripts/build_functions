#!/bin/bash
# Various Functions that I'm utilizing in the build scripts to simplify everything and keep it DRY.
# Macarthur Inbody
# mdi2455@email.vccs.edu / admin-contact@transcendental.us
# Licenesed under AGPLv3
# (C) 2019 -

# debug_random
# arg=NULL.
# This function is for debug purposes and starts the RNG always at 1 for the very start.
function debug_random(){
    RANDOM=1;
}

# seed_random
# arg=<NUMERIC_VALUE_TO_SEED_WITH>
# This functions seeds random with a value that's been given to it as an argument and is the first one.
# this'll be utilized for when it's making tests and deciding how to seed it.
function seed_random(){
    RANDOM=$1;
}

# continue_random
# arg=NULL;
# this function makes random output more random numbers by seeding it with a random(ish) number.
# it's primary use for when we're doing partial rebuilds/building tests.
function continue_random(){
# here we are setting the seed value to the current number of nanoseconds that are on the clock from date.
# via it's format string, then capturing that input from the subshell, expanding it to a value and then we
# are setting it to the variable seed. And since variables are global by default we are setting it as local
# so that in case the variable seed is every set anywhere else it won't overwrite it.
    local seed=$( date +%N );
    RANDOM=$seed;
}

# this function is the hash maker which right now just outputs the b64 encoded sha1 hash.
# also it reads from stdin, that's why there's nothing at the front it just starts going.
function mk_hash(){
# You can imagine an invisible `cat stdin |` operator at the front if it helps you realize what's going on here.
    if ! [ $HASH_ENCODING ]; then
        openssl dgst -sha1 -binary | base64 | tr '\/+' '_-';
        #if it's set to b32
    elif [ $HASH_ENCODING = 'b32' ]; then
        openssl dgst -sha1 -binary | b32;
    else
        #default case.
        openssl dgst -sha1 -binary | base64;
    fi
}
#this function gets words of a certain length that are valid ASCII I include control characters in the grepping for simplicity's sake.
function get_certain_words(){
#the ake command makes sure that the length of the file it's reading line by line column $0=first columnt is equal to the
#second argument's length then we grep all ASCIi characters it could've been a single command.
# \x00-\x7f=0-127 aka valid ASCII characters.
    awk 'length($0) == '"$2"'' "$1" | grep  -P -v '[^\x00-\x7f]'
}
#this selects a random word from the dictionary that's passed to it as argument 1, argument 2 is that dictionaries length.
#argument 3 is whether it's going to chose the same for testing purposes.
function get_random_word(){
#eventually add the option to make the word be a set length which'll be this command.
#sed -ne '/.\{8\}$/p' /usr/share/dict/american-english  | sed -n '<LINE_NUM> p';

#if arguments are greater than or equal to 3 and the third argument is true/1.
    if [ $# -ge 3 ]; then
        if [ $3 = 1 ]; then
            #seed random with the global variable $level
        seed_random $level;
        fi
    fi
    #local variables ot make it easier to read.
    local dict=$1;
    local dict_len=$2;
    #get lines  1-file_length as sed is 1 index based.
    local rnd_line=$((  ( $RANDOM % $dict_len )+1 ));
    #local password=$( sed -n "$rnd_line p" $dict_file );
    #printf $password;
    #use sed in address mode.
    sed -n "$rnd_line p" $dict;
}
function make_false_flag(){
    if [ $# -ge 3 ]; then
        seed_random $level;
    fi

    local dict=$1;
    local dict_len=$2;
    local rnd_line=$((  ( $RANDOM % $dict_len )+1 ));
    local password=$( sed -n "$rnd_line p" $dict );
    printf $password | mk_hash;
}
make_flag(){
    if [ $# -ge 1 ];then
        seed_random $level;
    fi
# The level will be hex-encodded to reduce character count and make easier to bruteforce the password(for now).
    local hex_num=$( printf '%x' $1 );
# the dictionary file right now it's not checking which set of flags are being built.
# it will have a case switch for the dictionaries later.
    local dict_file='../dict/hound_dict';
# we get the number of lines from the file since it can change.
    local max_line=$( cat $dict_file | wc -l);
# we use random to select a random line and add one to it so that we get a valid range for sed.
# since sed counts from 1 for whatever reason.
    local rnd_line=$((  ( $RANDOM % $max_line )+1 ));

# then we use sed in address mode to selct the line from the file, and including levelnum encoded
# as hex previously.
    local password=$( sed -n "$rnd_line p" $dict_file )$1;
    #sed -n "$rnd_line p" $dict_file;
# pass it to string to the hash function.
# then we b64 encode it, then we use tr to delete the trailing '='s and finally replace the characters to make
# it safe for putting into directories. How it's captured is just by doing it like any other command it'd be something like.
# <NAME><LEVEL>_FLAG=$( make_flag <NUMERIC_LEVEL>);
    printf '%s' $password | mk_hash;
}

make_semistatic_flag(){
# The level will be hex-encodded to reduce character count and make easier to bruteforce the password(for now).
    local hex_num=$( printf '%x' $level );
# the dictionary file right now it's not checking which set of flags are being built.
# it will have a case switch for the dictionaries later.
    local dict_file='../dict/hound_dict';
# we get the number of lines from the file since it can change.
    #local max_line=$( cat $dict_file | wc -l);
# we use random to select a random line and add one to it so that we get a valid range for sed.
# since sed counts from 1 for whatever reason.
    local rnd_line=$(( $1 +1 ));

# then we use sed in address mode to selct the line from the file, and including levelnum encoded
# as hex previously.
    local password=$( sed -n "$rnd_line p" $dict_file )$hex_num;
    #sed -n "$rnd_line p" $dict_file;
# pass it to string to the hash function.
# then we b64 encode it, then we use tr to delete the trailing '='s and finally replace the characters to make
# it safe for putting into directories. How it's captured is just by doing it like any other command it'd be something like.
# <NAME><LEVEL>_FLAG=$( make_flag <NUMERIC_LEVEL>);
    printf  $password | mk_hash;
}

#this function will eventually actually do something.
#it'll select a random element from an array but for now it does nothing.
function get_random_element(){
    return 0
}

function select_regex(){
    # the options for the regex. It sets the regex pattern for the string.
    # 0=all lowercase characters. 1=starts with uppercase. 2=starts with number. 3=starts with special character.
    # 4=ends with a number. 5=ends with a special character. 6=ends with a capital character. 7=ends with a lowercase letter.
    regex_case=$(( ($RANDOM % 7) + 1 ));
    local regex_str='';
    local tmp=0;
    case $regex_case in
#        0)
#           regex_str='s/\(.*\)/\L\1/';
#        ;;
        1)
            tmp=$(( ($RANDOM  % 26 ) + 65 ));
            tmp=$( perl -e "printf '%c',$tmp;" );
            regex_str="s/\(.*\)/$tmp\1/";
        ;;
        2)
            tmp=$(( $RANDOM % 10 ));
            regex_str="s/\(.*\)/$tmp\1/";
        ;;
        3)
            tmp=$(( $RANDOM % 5 ));
            case $tmp in
                0)
                    tmp='\.';
                ;;
                1)
                    tmp='\#';
                ;;
                2)
                    tmp='\@';
                ;;
                3)
                    tmp='\:';
                ;;
                4)
                    tmp='\_';
                ;;
            esac;
            regex_str="s/\(.*\)/$tmp\1/";
        ;;
        4)
            tmp=$(( $RANDOM % 10 ));
            regex_str="s/\(.*\)/\1$tmp/";
        ;;
        5)
            tmp=$(( $RANDOM % 5 ));
            case $tmp in
                0)
                    tmp='\.';
                ;;
                1)
                    tmp='\#';
                ;;
                2)
                    tmp='\@';
                ;;
                3)
                    tmp='\:';
                ;;
                4)
                    tmp='\_';
                ;;
            esac;
            regex_str="s/\(.*\)/\1$tmp/";
        ;;
        6)
            tmp=$(( ($RANDOM  % 26 ) + 65 ));
            tmp=$( perl -e "printf '%c',$tmp;" );
            regex_str="s/\(.*\)/\1$tmp/";
        ;;
        7)
            tmp=$(( ($RANDOM  % 26 ) + 97 ));
            tmp=$( perl -e "printf '%c',$tmp;" );
            regex_str="s/\(.*\)/\1$tmp/";
        ;;
    esac
    echo "$regex_case $regex_str";
}
select_regex_help_str(){
    # the options for the regex. It sets the regex pattern for the string.
    # 0=all lowercase characters. 1=starts with uppercase. 2=starts with number. 3=starts with special character.
    # 4=ends with a number. 5=ends with a special character. 6=ends with a capital character. 7=ends with a lowercase letter.
    local regex_case=$1;
    local regex_help_str='The RegEx must match a string';
    case $regex_case in
        0)
            regex_help_str="$regex_help_str containing only lowercase letters,digit,spaces."
        ;;
        1)
            regex_help_str="$regex_help_str that starts with an uppercase letter."
        ;;
        2)
            regex_help_str="$regex_help_str that starts with a number."
        ;;
        3)
            regex_help_str="$regex_help_str that starts with a special character."
        ;;
        4)
            regex_help_str="$regex_help_str that ends with a number."
        ;;
        5)
            regex_help_str="$regex_help_str that ends with a special character."
        ;;
        6)
            regex_help_str="$regex_help_str that ends with a capital letter."
        ;;
        7)
            regex_help_str="$regex_help_str that ends with a lowercase letter."
        ;;
    esac
    echo "$regex_help_str";
}
word_wrap_string(){
    local str="$1";
    local columns="$2";
    if [[ $# != 3 ]];then
        splitter='|';
    fi
    fmt --width="$2" --goal="$2" <<< "$1" | sed -e 's/^\ //g' | tr '\n' '|'
}

function str_to_char(){
    if [[ $1 = 'hex' ]];then
        printf '%x' "'$2'";
    elif [[ $1 = 'decimal' ]];then
        printf '%d' "'$2'";
    else
        printf '%d' "'$1'";
    fi
}

function str_index() {
  local x="${1%%$2*}"
  [[ "$x" = "$1" ]] && echo -1 || echo "${#x}"
}

function ord(){
    printf '%x' "'$1'";
}

function chr(){
    perl -e "printf '%c',$1;";
}

function encrypt_str(){
    local str="$1";
    local sequence;
    local str_len=${#str};
    local sequence_start=$2;
    read -r -a sequence <<< $(generate_sequence $sequence_start );
    local output_str='';
    local i=0;
    local j=0;
    local byte='';
    local chr='';
    local b32_dict='ybndrfg8ejkmcpqxot1uwisza345h769';
    local b64_dict='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+_';
    local index=0;
    #echo 'ss '$sequence_start;
    #echo 'seq'"${sequence[*]}";
    for ((i=0;i<str_len;++i)){
        byte=${str:$i:1};
        index=`(str_index $b32_dict $byte )`;
        index=$(( $index ^ ${sequence[$j]} ));
        ouput_str+="${b64_dict:$index:1}";
        #printf ${b64_dict:$index:1};
        let j++;
        if [[ $j -ge 5 ]];then
            j=0;
        fi

    }

    printf "$ouput_str\n";
}

function cipher_string(){
	local code_1='B-ZAb-za'
	local code_2='C-ZA-Bc-za-b'
	local code_3='D-ZA-Cd-za-c'
	local code_4='E-ZA-De-za-d'
	local code_5='F-ZA-Ef-za-e'
	local code_6='G-ZA-Fg-za-f'
	local code_7='H-ZA-Gh-za-g'
	local code_8='I-ZA-Hi-za-h'
	local code_9='J-ZA-Ij-za-i'
	local code_10='K-ZA-Jk-za-j'
	local code_11='L-ZA-Kl-za-k'
	local code_12='M-ZA-Lm-za-l'
	local code_13='N-ZA-Mn-za-m'
	local code_14='O-ZA-No-za-n'
	local code_15='P-ZA-Op-za-o'
	local code_16='Q-ZA-Pq-za-p'
	local code_17='R-ZA-Qr-za-q'
	local code_18='S-ZA-Rs-za-r'
	local code_19='T-ZA-St-za-s'
	local code_20='U-ZA-Tu-za-t'
	local code_21='V-ZA-Uv-za-u'
	local code_22='W-ZA-Vw-za-v'
	local code_23='X-ZA-Wx-za-w'
	local code_24='Y-ZA-Xy-za-x'
    local code_25='ZA-Yza-y'
    local pattern="${!1}";
    local final_pattern='';
    local string=$2;
    final_pattern="'A-Za-z' '$pattern'";
    printf "$string" | tr $final_pattern;
}

function select_regex_test_pattern(){
    local regex_code=$1;
    local sed_str='';
    case $regex_code in
        1)
            sed_str='/^[A-Z]/p';
        ;;
        2)
            sed_str='/^[0-9]/p';
        ;;
        3)
            sed_str='/^[^A-Za-z0-9\ ]/p';
        ;;
        4)
            sed_str='/[0-9]$/p';
        ;;
        5)
            sed_str='/[^A-Za-z0-9]$/p';
        ;;
        6)
            sed_str='/[A-Z]$/p';
        ;;
        7)
            sed_str='/[a-z]$/p';
        ;;
    esac
    echo "$sed_str";
}
function generate_sequence(){
    local a=0;
    local b=1;
    local num=0;
    local start=$1;
    local end=$(( $start + 5 ));
    sequence_str='';
    for (( i=0; i<10; i++ )) {
        num=$(( a + b ));
        a=$b;
        b=$num;
        if [[ $i -ge $start ]];then
            sequence_str="$sequence_str $a";
        fi
        if [[ $i = $end ]];then
            break;
        fi
    }
    printf "$sequence_str";
}
