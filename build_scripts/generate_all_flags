#!/bin/bash
# This script will take in the word arrays for each flag and then generate the passwords
# for them so that they can be put into CTFd.
# Macarthur Inbody
# mdi2455@email.vccs.edu / admin-contact@transcendental.us
# Licenesed under AGPLv3
# (C) 2019 - 2020

# shellcheck disable=SC2034
HASH_ENCODING='b32';
source build_functions;
declare -i j=0;
declare -i i=0;
declare -i max_words=11;
declare -i level=0;
declare -a word_arr=();
hash_string='';
word_string='';
hashes='';
tmp='';
while read -r line;do
    hash_string+="this.hound$j""_hash=new Array(";
    level=$j;
    word_arr=( $line );

    for i in $( seq 0 $max_words );do
        chosen_word=${word_arr[$i]};
        chosen_word=$(( $chosen_word - 1 ));    
        if [[ $i != 0 ]];then
           hash_string+=', ';
        fi
        hash_string+=$(printf "'%s'" "$( make_semistatic_flag $chosen_word)" );
        hashes+=$(printf "'%s'" "$( make_semistatic_flag $chosen_word) ")'\n';
    done

    hash_string+=');\n';
    word_string+="this.hound$j""_word=new Array(";
    for i in $( seq 0 $max_words );do
        chosen_word=${word_arr[$i]};
        if [[ $i != 0 ]];then
           word_string+=', ';
        fi
        tmp=$( sed -n "$chosen_word p" '../dict/hound_dict');
        tmp="$tmp"$( printf '%02x' $level);
        word_string+=$(printf "'%s'" "$tmp");
    done
    word_string+=');\n';
    let j++;
done < word_arrays;
printf "$hash_string\n";
printf "$word_string\n";
printf "$hashes" |  uniq -d | sort -u ;
