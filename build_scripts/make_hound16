#!/bin/bash
# Hound 15 AKA `Why can't I hold all of these pipes?!/I'm laying down pipes better than a Chad Plumber!
# Macarthur Inbody
# mdi2455@email.vccs.edu / admin-contact@transcendental.us
# Licenesed under AGPLv3
# (C) 2019 -
# Hound Flag where they have to repeatedly decompress a file many times
# Then they have to decode the hexdumped file. Followed by decoding the base64
# text to get the final flag string.

function select_command(){
    local str="$1";

    case "$str" in
        'bzip2')
            command='bzcat'
        ;;
        'gzip')
            command='zcat';
        ;;
        'POSIX')
            command='tar xO';
        ;;
        'ASCII')
            command='DONE';
        ;;
        'XZ')
            command='xzcat';
        ;;
        *)
            command='ABSOLUTE_FAILURE';
        ;;
    esac

    echo $command;
}


function decompression_tester(){
    local filename="$1";
    are_we_done=0;
    i=0;
    file_type=$( file "$filename" | cut -d' ' -f2 );
    command_base=$( select_command "$file_type" );
    return_val='';
    if [[ "$command_base" = "tar xO" ]];then
        command_base="tar xOf";
    fi
    command="$command_base $filename";
    command_base="$command";
    while [[ $are_we_done -eq 0 && i -lt 20 ]];do
        file_type=$( eval "$command" | file - | cut -d' ' -f2 );
        command=$( select_command "$file_type" );
        if [ "$command" == "DONE" ];then
            are_we_done=1;
            break;
        elif [ "$command" == 'ABSOLUTE_FAILURE' ];then
            return_val='failed!';
            break;
        else
            command="$command_base | $command"
            command_base=$command;
        fi
        let i++;
    done

    if [ "$return_val" != 'failed!' ];then
        return_val=$( eval "$command_base" | xxd -r | base64 -d  );
    fi
    echo "$return_val";
    return 0;
}

HASH_ENCODING='b32';

if [[ $# -lt 1 ]];then
    level=15;
else
    level=$1;
fi
#this reads in the functions that are in the library.
source build_functions;

#we seed $RANDOM with the current level value.
seed_random $level;

#we then make the flag by calling it.
#FLAG_HOUND=$( make_flag $level 1);
#we continue by selecting things semi_randomly.
#when we are in debug mode it'll be calling debug_random
continue_random;
# the old flag.
#FLAG_HOUND5=UGhpbmVhcyBPciBGaW5ueSBGb3gK;
#FLAG_HOUND5=$(echo 'Phineas Or Finny Fox' | base64);
#this is to keep them on their toes so that they _don't_ know how many levels it is everytime.
WORD_ARRAY=(4 3 2 1 0 60 59);
tmp_rnd=`( dd if=/dev/urandom bs=2 count=1 status=none | od -A n -t u )`;
#chosen_word=${WORD_ARRAY[$(( $RANDOM % 7 ))]};
chosen_word=${WORD_ARRAY[$(( $tmp_rnd % 7 ))]};
FLAG_HOUND=$( make_semistatic_flag $chosen_word);

compression_depth=$(( ($RANDOM % 3 ) + 4));
i=0;
filenames=('data' 'file' 'dump' 'binary');
filenames_len=${#filenames[*]};
endnames=('bin' 'data' 'hex' 'dat');
endnames_len=${#endnames[*]};
compression_options=('bz' 'gz' 'tgz' 'txz' 'tar' 'xz');
compression_options_len=${#compression_options[*]};
compression='';

FLAG_STR=$(printf '%s\n' "The password to the next level and the flag is $FLAG_HOUND");
echo $FLAG_STR;
mkdir -p tmp;
cd tmp;
pwd;
rm -v *;
filename=${filenames[ $(( $RANDOM % $filenames_len ))]}'.'${endnames[ $(( $RANDOM % $endnames_len ))]};
filename2=${filenames[ $(( $RANDOM % $filenames_len ))]}'.'${endnames[ $(( $RANDOM % $endnames_len ))]};

if [[ "$filename2" == "$filename" ]]; then
    filename2=${filenames[ $(( $RANDOM % $filenames_len ))]}'.'${endnames[ $(( $RANDOM % $endnames_len ))]};
fi

printf "$FLAG_STR\n" | base64 -w 0 > "$filename";
xxd  "$filename" > "$filename2";


echo $filename;
echo $filename2;
cp "$filename2" 'test';
mv -v $filename2 $filename;
cat $filename;
#rm -v $filename;

function compress_file(){
    local input_file=$2;
    local output_file=$3;
    case $1 in
        'bz')
        bzip2 -c9v $input_file > $output_file;
        ;;
        'gz')
        gzip -c9v $input_file > $output_file;
        ;;
        'tgz')
        tar -cvzf $output_file $input_file;
        ;;
        'txz')
         tar -cvJf $output_file $input_file;
        ;;
        'tar')
        tar -cvf $output_file $input_file;
        ;;
        'xz')
        xz -e9vc $input_file > $output_file;
        ;;
    esac
#    rm -v $input_file;
#chown 1006 "$output_file";
chmod 755 "$output_file";
    return 0;
}
for (( i=0; i<compression_depth; i++)); do
    compression=${compression_options[$(( $RANDOM % $compression_options_len ))]};
    filename2=${filenames[ $(( $RANDOM % $filenames_len ))]}'.'${endnames[ $(( $RANDOM % $endnames_len ))]};
    if [[ "$filename2" == "$filename" ]]; then
        filename2=${filenames[ $(( $RANDOM % $filenames_len ))]}'.'${endnames[ $(( $RANDOM % $endnames_len ))]};
    fi

    echo $i;
    echo $compression;
    echo 'filename1'$filename;
    echo 'filename2'$filename2;
    echo '';
    compress_file $compression $filename $filename2;
    rm $filename;
    filename="$filename2";

done
rm -v ../../hounds/hound"$level"/*
cp -v "$filename" ../../hounds/hound"$level"

TEST_STR=$( decompression_tester "$filename" );
if [[ "$TEST_STR" == "$FLAG_STR" ]];then
    echo "Build hound$level succeeded.";
else
    echo "We were expecting. $FLAG_STR but we got,\n $TEST_STR.";
    echo "Please manually review the file $filename, but first run the program pipemadness like so.\n bash pipe_madness.sh $filename \n to confirm that it isn't just a fluke.";
fi
cd ..;
#rm -Rv tmp;
rm -Rv tmp;
#we are doing level+1 since this _flag_ is the _password_ for the next level.
let level++;
#The file we are outputting do is used by the change password script that we're using to modify passwords one-after another
#in an automated fashion.
echo "hound$level:$FLAG_HOUND" >> the_flags;
