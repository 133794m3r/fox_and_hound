#!/bin/bash
# Hound9 AKA I am the master of joining. All connection are known instantly.
# Macarthur Inbody <mdi2455@email.vccs.edu>
# AGPLv3
# 2019 -
#
# the one where they use join to find the password for a certain user.
# they could obviously do this by just opening the files but it's not very easy todo.
# this script can also be used to make fake passwd and shadow files.


#the dictionary file that we're using to get our words from.
#this will be set to a global variable DICTIONARY from the main script once the whole
#build system is done.
#dictionary='/usr/share/dict/american-english';
dictionary='../dict/names_dict';
#get the length of the dictionary file.
#in the future this'll be calculated once from the main build script and then the string
#DICTIONARY_LEN will be set to this value.
#dictionary_len=$( wc -l '/usr/share/dict/american-english' );
dictionary_len=29687;

#The Password Dictionary that we're using. It's the top 2k that are 8 characters in length.
password_dict='../dict/passwords_dict';
password_dict_len='2007';
#set the encoding. In future versions this'll be hardcoded from the main script.
#this is to make sure tha all hashes are b32 encoded.
HASH_ENCODING='b32';
CORRECT_USER='';
if [[ $# -lt 1 ]];then
#the current level we're on.
    level=9;
else
    level=$1;
fi
#this reads in the functions that are in the library.
source build_functions;

#we seed $RANDOM with the current level value.
seed_random $level;

FLAG_HOUND=$( make_flag 1);

continue_random
#the filename we're going to use. It's an empty string by default.
filename='';
#The prefixes for the files
filename_arr=('.-' '-~' '-.' '.~' 'this file has spaces' 'spaces in the name' 'INHERE' 'README' 'INSIDETHIS' 'FILE' 'SECRET');
#we get the length of the files.
filename_arr_len=${#filename_arr[*]};
#the first filename we're going to be sending data to.
filename_1=${filename_arr[ $(( $RANDOM % $filename_arr_len ))]};
#the second file data is going to be sent to.
filename_2=${filename_arr[ $(( $RANDOM % $filename_arr_len ))]};
#to make sure that they're not equal to eachother a quick while loop to pick another one randomly.
while [ "$filename_2" = "$filename_1" ];do
    #placeholder.
    filename_2=${filename_arr[ $(( $RANDOM % $filename_arr_len ))]};
done




#number of users to insert into the passwd and shadow file.
#the passwords are going to be b32 encoded instead of the normal format. Plus they're not sha256crypted. They are plain sha1.
USERS=30;
#how many lines the original file had.
max_lines=42;
#basically we're making mock shadow and passwd files and are going to join them so that we can "crack" the passwords.
#but the users are going to stop short of that for the linux class. This is just teaching them how to do that via
# a simple join.
#the userid that we're starting with.
uid=1000;
#the groupid to start off with.
guid=1000;
#set the username to an empty string.
username='';
#the line we're going to be inserting to.
insert_line=0;
#the string to be inserted.
insert_string='';
#the base files and the ones that they're going to be built into.
#passwd_base=../base_files/passwd_base;
passwd_base=../base_files/passwd_base_sort;
passwd_built=../base_files/passwd_built;
#shadow_base=../base_files/shadow_base;
shadow_base=../base_files/shadow_base_sort;
shadow_built=../base_files/shadow_built;
#remove the old ones.
#rm $shadow_built $passwd_built;
cp $passwd_base $passwd_built;
cp $shadow_base $shadow_built;
CORRECT_UID=$(( ($RANDOM % $USERS) ));
#we do the first one outside of the normal route because we have to move the output to a new file to start off with.
#insert_line=$(( ($RANDOM % $max_lines) +1 ));
#username=$( get_random_word $dictionary $dictionary_len )
#password=$( printf $username | mk_hash );
#password=$FLAG_HOUND;
#echo $username;
#CORRECT_USER=$username;
#the passwd string.
#insert_string="$username\:x\:$uid\:$guid\:"$( perl -e "print ucfirst $username" )"\,\,\,\:\/home\/$username\:\/bin\/bash";
#sed "$insert_line i$insert_string" $passwd_base > $passwd_built;
#insert_line=$(( ($RANDOM % $max_lines) +1 ));
#the shadow string.
#insert_string="$username\:$password\:18062\:0\:99999\:7\:\:\:";
#sed "$insert_line i$insert_string" $shadow_base > $shadow_built;
#let 'uid++';
#let 'guid++';
#':true
for ((i=0;i<$USERS;i++));do
    insert_line=$(( ($RANDOM % $max_lines) + 1 ));
    #echo '$i'$i' ';
    username=$( get_random_word $dictionary $dictionary_len )
    if [[ $i -eq $CORRECT_UID ]];then
        password=$FLAG_HOUND;
        CORRECT_USER=$username;
        echo 'uid:'$CORRECT_UID;
        echo 'user:'$username;
    else
        password=$( make_false_flag $password_dict $password_dict_len );
    fi
    #the passwd string.
    insert_string="$username\:x\:$uid\:$guid\:"$( perl -e "print ucfirst $username" )"\,\,\,\:\/home\/$username\:\/bin\/bash";
    sed -i "$insert_line i $insert_string" $passwd_built
    insert_line=$(( ($RANDOM % $max_lines )+1 ));
    #the shadow string.
    insert_string="$username\:$password\:18062\:0\:99999\:7\:\:\:";
    sed -i "$insert_line i $insert_string" $shadow_built;
    let uid++;
    let guid++;
done

#get all of the filenames converted to arguments to be sent to rm.
#we start with sending all elements of the aray piped to tr. Then we replace the space characters with a pipe.
#so that it can be used with egrep as an OR operator. This is then expanded out and using command substituion the final string is set to the variable
#tmp
tmp=$( echo ${filename_arr[*]} | tr ' ' '|' );
#remove the old file.
#it doesthe following. First we list all of the files in the directory. Then we pipe it to egrep and search for all of the keys that we have chosen.
#then it sends those values to xargs and we tell it to replace all instances of {} with the argument. Then we use printf to insert into the final
#string utilizing printf to make each instance of the file as ./<filename> so that it can be rmed more easily. Finally the shell expands the value
#converts it to a string, this string is then converted into a set of arguments to be utilized by rm. This way there are no errors about a file not
#being found as rm only sees existing files because we only pass those that have been grepped.
ls -a ../hounds/hound$level | egrep "($tmp)" | xargs -i{} rm -v '../hounds/hound7/'"{}";

FLAG_CREATED=$( join -t':' <(sort -k1 -t':' $passwd_built) <(sort -k1 -t':' $shadow_built) 2>/dev/null | grep $CORRECT_USER | cut -d':' -f8 );
FLAG_CREATED=$( printf $RANDOM | mk_hash );
if [[ $FLAG_CREATED = $FLAG_HOUND ]];then
    printf 'Success, It actually worked.\n';
else
    printf 'Error on line 146.\n';
    printf "Expected:'$FLAG_HOUND' but got '$FLAG_CREATED'\n";
    printf "Please manually, sort the files, then join them.\nThen manually verify that the string created is correct. And get out the rubber duck.\n";
    printf "Use : $passwd_built and $shadow_built then join the files manually with join or unshadow to make sure the field's correct.\n The username should be $CORRECT_USER";
fi
cp  $passwd_built ../hounds/hound$level/"$filename_1";
cp  $shadow_built ../hounds/hound$level/"$filename_2";

sed -i "s/UID\=.*/UID\='$CORRECT_UID'/" ../home_folders/hound$level/.ssh/rc;

echo "hound$level:$FLAG_HOUND" >> the_flags;
